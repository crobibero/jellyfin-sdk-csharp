// <auto-generated/>
using Jellyfin.Sdk.Generated.Models;
using Jellyfin.Sdk.Generated.Users.AuthenticateByName;
using Jellyfin.Sdk.Generated.Users.AuthenticateWithQuickConnect;
using Jellyfin.Sdk.Generated.Users.ForgotPassword;
using Jellyfin.Sdk.Generated.Users.Item;
using Jellyfin.Sdk.Generated.Users.Me;
using Jellyfin.Sdk.Generated.Users.New;
using Jellyfin.Sdk.Generated.Users.Public;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Users {
    /// <summary>
    /// Builds and executes requests for operations under \Users
    /// </summary>
    public class UsersRequestBuilder : BaseRequestBuilder {
        /// <summary>The AuthenticateByName property</summary>
        public AuthenticateByNameRequestBuilder AuthenticateByName { get =>
            new AuthenticateByNameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The AuthenticateWithQuickConnect property</summary>
        public AuthenticateWithQuickConnectRequestBuilder AuthenticateWithQuickConnect { get =>
            new AuthenticateWithQuickConnectRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ForgotPassword property</summary>
        public ForgotPasswordRequestBuilder ForgotPassword { get =>
            new ForgotPasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Me property</summary>
        public MeRequestBuilder Me { get =>
            new MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The New property</summary>
        public NewRequestBuilder New { get =>
            new NewRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Public property</summary>
        public PublicRequestBuilder Public { get =>
            new PublicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Jellyfin.Sdk.Generated.Users.item collection</summary>
        /// <param name="position">The user id.</param>
        /// <returns>A <see cref="WithUserItemRequestBuilder"/></returns>
        public WithUserItemRequestBuilder this[Guid position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("userId", position);
            return new WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new <see cref="UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users{?isDisabled*,isHidden*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users{?isDisabled*,isHidden*}", rawUrl) {
        }
        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <returns>A List&lt;UserDto&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<UserDto>?> GetAsync(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<List<UserDto>> GetAsync(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<UserDto>(requestInfo, UserDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// Gets a list of users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<UsersRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public UsersRequestBuilder WithUrl(string rawUrl) {
            return new UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets a list of users.
        /// </summary>
        public class UsersRequestBuilderGetQueryParameters {
            /// <summary>Optional filter by IsDisabled=true or false.</summary>
            [QueryParameter("isDisabled")]
            public bool? IsDisabled { get; set; }
            /// <summary>Optional filter by IsHidden=true or false.</summary>
            [QueryParameter("isHidden")]
            public bool? IsHidden { get; set; }
        }
    }
}
