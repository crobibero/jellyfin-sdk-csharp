// <auto-generated/>
using Jellyfin.Sdk.Generated.Models;
using Jellyfin.Sdk.Generated.Users.Item.Items.Item.Intros;
using Jellyfin.Sdk.Generated.Users.Item.Items.Item.LocalTrailers;
using Jellyfin.Sdk.Generated.Users.Item.Items.Item.Rating;
using Jellyfin.Sdk.Generated.Users.Item.Items.Item.SpecialFeatures;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Users.Item.Items.Item {
    /// <summary>
    /// Builds and executes requests for operations under \Users\{userId}\Items\{itemId}
    /// </summary>
    public class WithItemItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The Intros property</summary>
        public IntrosRequestBuilder Intros { get =>
            new IntrosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The LocalTrailers property</summary>
        public LocalTrailersRequestBuilder LocalTrailers { get =>
            new LocalTrailersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Rating property</summary>
        public RatingRequestBuilder Rating { get =>
            new RatingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The SpecialFeatures property</summary>
        public SpecialFeaturesRequestBuilder SpecialFeatures { get =>
            new SpecialFeaturesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithItemItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithItemItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users/{userId}/Items/{itemId}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithItemItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithItemItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users/{userId}/Items/{itemId}", rawUrl) {
        }
        /// <summary>
        /// Gets an item from a user&apos;s library.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<BaseItemDto?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<BaseItemDto> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<BaseItemDto>(requestInfo, BaseItemDto.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets an item from a user&apos;s library.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithItemItemRequestBuilder WithUrl(string rawUrl) {
            return new WithItemItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
