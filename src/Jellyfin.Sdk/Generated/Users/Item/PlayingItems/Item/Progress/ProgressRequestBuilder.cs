// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Users.Item.PlayingItems.Item.Progress {
    /// <summary>
    /// Builds and executes requests for operations under \Users\{userId}\PlayingItems\{itemId}\Progress
    /// </summary>
    public class ProgressRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new <see cref="ProgressRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProgressRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users/{userId}/PlayingItems/{itemId}/Progress{?audioStreamIndex*,isMuted*,isPaused*,liveStreamId*,mediaSourceId*,playMethod*,playSessionId*,positionTicks*,repeatMode*,subtitleStreamIndex*,volumeLevel*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="ProgressRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProgressRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Users/{userId}/PlayingItems/{itemId}/Progress{?audioStreamIndex*,isMuted*,isPaused*,liveStreamId*,mediaSourceId*,playMethod*,playSessionId*,positionTicks*,repeatMode*,subtitleStreamIndex*,volumeLevel*}", rawUrl) {
        }
        /// <summary>
        /// Reports a user&apos;s playback progress.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(Action<RequestConfiguration<ProgressRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task PostAsync(Action<RequestConfiguration<ProgressRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Reports a user&apos;s playback progress.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<ProgressRequestBuilderPostQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<ProgressRequestBuilderPostQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="ProgressRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ProgressRequestBuilder WithUrl(string rawUrl) {
            return new ProgressRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Reports a user&apos;s playback progress.
        /// </summary>
        public class ProgressRequestBuilderPostQueryParameters {
            /// <summary>The audio stream index.</summary>
            [QueryParameter("audioStreamIndex")]
            public int? AudioStreamIndex { get; set; }
            /// <summary>Indicates if the player is muted.</summary>
            [QueryParameter("isMuted")]
            public bool? IsMuted { get; set; }
            /// <summary>Indicates if the player is paused.</summary>
            [QueryParameter("isPaused")]
            public bool? IsPaused { get; set; }
            /// <summary>The live stream id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("liveStreamId")]
            public string? LiveStreamId { get; set; }
#nullable restore
#else
            [QueryParameter("liveStreamId")]
            public string LiveStreamId { get; set; }
#endif
            /// <summary>The id of the MediaSource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaSourceId")]
            public string? MediaSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("mediaSourceId")]
            public string MediaSourceId { get; set; }
#endif
            /// <summary>The play method.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("playMethod")]
            public string? PlayMethod { get; set; }
#nullable restore
#else
            [QueryParameter("playMethod")]
            public string PlayMethod { get; set; }
#endif
            /// <summary>The play session id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("playSessionId")]
            public string? PlaySessionId { get; set; }
#nullable restore
#else
            [QueryParameter("playSessionId")]
            public string PlaySessionId { get; set; }
#endif
            /// <summary>Optional. The current position, in ticks. 1 tick = 10000 ms.</summary>
            [QueryParameter("positionTicks")]
            public long? PositionTicks { get; set; }
            /// <summary>The repeat mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("repeatMode")]
            public string? RepeatMode { get; set; }
#nullable restore
#else
            [QueryParameter("repeatMode")]
            public string RepeatMode { get; set; }
#endif
            /// <summary>The subtitle stream index.</summary>
            [QueryParameter("subtitleStreamIndex")]
            public int? SubtitleStreamIndex { get; set; }
            /// <summary>Scale of 0-100.</summary>
            [QueryParameter("volumeLevel")]
            public int? VolumeLevel { get; set; }
        }
    }
}
