// <auto-generated/>
using Jellyfin.Sdk.Generated.Videos.Item.AdditionalParts;
using Jellyfin.Sdk.Generated.Videos.Item.AlternateSources;
using Jellyfin.Sdk.Generated.Videos.Item.Hls1;
using Jellyfin.Sdk.Generated.Videos.Item.Hls;
using Jellyfin.Sdk.Generated.Videos.Item.Item;
using Jellyfin.Sdk.Generated.Videos.Item.LiveM3u8;
using Jellyfin.Sdk.Generated.Videos.Item.MainM3u8;
using Jellyfin.Sdk.Generated.Videos.Item.MasterM3u8;
using Jellyfin.Sdk.Generated.Videos.Item.StreamNamespace;
using Jellyfin.Sdk.Generated.Videos.Item.StreamWithContainer;
using Jellyfin.Sdk.Generated.Videos.Item.Subtitles;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Jellyfin.Sdk.Generated.Videos.Item {
    /// <summary>
    /// Builds and executes requests for operations under \Videos\{itemId-id}
    /// </summary>
    public class ItemIdItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The AdditionalParts property</summary>
        public AdditionalPartsRequestBuilder AdditionalParts { get =>
            new AdditionalPartsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The AlternateSources property</summary>
        public AlternateSourcesRequestBuilder AlternateSources { get =>
            new AlternateSourcesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hls property</summary>
        public HlsRequestBuilder Hls { get =>
            new HlsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The hls1 property</summary>
        public Hls1RequestBuilder Hls1 { get =>
            new Hls1RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The liveM3u8 property</summary>
        public LiveM3u8RequestBuilder LiveM3u8 { get =>
            new LiveM3u8RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mainM3u8 property</summary>
        public MainM3u8RequestBuilder MainM3u8 { get =>
            new MainM3u8RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The masterM3u8 property</summary>
        public MasterM3u8RequestBuilder MasterM3u8 { get =>
            new MasterM3u8RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stream property</summary>
        public StreamRequestBuilder Stream { get =>
            new StreamRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Subtitles property</summary>
        public SubtitlesRequestBuilder Subtitles { get =>
            new SubtitlesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Jellyfin.Sdk.Generated.Videos.item.item collection</summary>
        /// <param name="position">The media source id.</param>
        /// <returns>A <see cref="MediaSourceIdItemRequestBuilder"/></returns>
        public MediaSourceIdItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("mediaSourceId%2Did", position);
            return new MediaSourceIdItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new <see cref="ItemIdItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemIdItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Videos/{itemId%2Did}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="ItemIdItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemIdItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Videos/{itemId%2Did}", rawUrl) {
        }
        /// <summary>
        /// Builds and executes requests for operations under \Videos\{itemId-id}\stream.{container}
        /// </summary>
        /// <returns>A <see cref="StreamWithContainerRequestBuilder"/></returns>
        /// <param name="container">The video container. Possible values are: ts, webm, asf, wmv, ogv, mp4, m4v, mkv, mpeg, mpg, avi, 3gp, wmv, wtv, m2ts, mov, iso, flv.</param>
        public StreamWithContainerRequestBuilder StreamWithContainer(string container) {
            if(string.IsNullOrEmpty(container)) throw new ArgumentNullException(nameof(container));
            return new StreamWithContainerRequestBuilder(PathParameters, RequestAdapter, container);
        }
    }
}
