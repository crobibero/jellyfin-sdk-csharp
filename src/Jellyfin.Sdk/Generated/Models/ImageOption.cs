// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class ImageOption : IParsable {
        /// <summary>Gets or sets the limit.</summary>
        public int? Limit { get; set; }
        /// <summary>Gets or sets the minimum width.</summary>
        public int? MinWidth { get; set; }
        /// <summary>Gets or sets the type.</summary>
        public ImageType? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ImageOption CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ImageOption();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Limit", n => { Limit = n.GetIntValue(); } },
                {"MinWidth", n => { MinWidth = n.GetIntValue(); } },
                {"Type", n => { Type = n.GetEnumValue<ImageType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("Limit", Limit);
            writer.WriteIntValue("MinWidth", MinWidth);
            writer.WriteEnumValue<ImageType>("Type", Type);
        }
    }
}
