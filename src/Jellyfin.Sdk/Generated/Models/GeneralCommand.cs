// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class GeneralCommand : IParsable {
        /// <summary>The Arguments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GeneralCommand_Arguments? Arguments { get; set; }
#nullable restore
#else
        public GeneralCommand_Arguments Arguments { get; set; }
#endif
        /// <summary>The ControllingUserId property</summary>
        public Guid? ControllingUserId { get; set; }
        /// <summary>This exists simply to identify a set of known commands.</summary>
        public GeneralCommandType? Name { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GeneralCommand CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GeneralCommand();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Arguments", n => { Arguments = n.GetObjectValue<GeneralCommand_Arguments>(GeneralCommand_Arguments.CreateFromDiscriminatorValue); } },
                {"ControllingUserId", n => { ControllingUserId = n.GetGuidValue(); } },
                {"Name", n => { Name = n.GetEnumValue<GeneralCommandType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<GeneralCommand_Arguments>("Arguments", Arguments);
            writer.WriteGuidValue("ControllingUserId", ControllingUserId);
            writer.WriteEnumValue<GeneralCommandType>("Name", Name);
        }
    }
}
