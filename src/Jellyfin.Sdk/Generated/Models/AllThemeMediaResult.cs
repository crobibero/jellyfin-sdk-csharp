// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class AllThemeMediaResult : IParsable {
        /// <summary>Class ThemeMediaResult.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ThemeMediaResult? SoundtrackSongsResult { get; set; }
#nullable restore
#else
        public ThemeMediaResult SoundtrackSongsResult { get; set; }
#endif
        /// <summary>Class ThemeMediaResult.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ThemeMediaResult? ThemeSongsResult { get; set; }
#nullable restore
#else
        public ThemeMediaResult ThemeSongsResult { get; set; }
#endif
        /// <summary>Class ThemeMediaResult.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ThemeMediaResult? ThemeVideosResult { get; set; }
#nullable restore
#else
        public ThemeMediaResult ThemeVideosResult { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AllThemeMediaResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AllThemeMediaResult CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AllThemeMediaResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"SoundtrackSongsResult", n => { SoundtrackSongsResult = n.GetObjectValue<ThemeMediaResult>(ThemeMediaResult.CreateFromDiscriminatorValue); } },
                {"ThemeSongsResult", n => { ThemeSongsResult = n.GetObjectValue<ThemeMediaResult>(ThemeMediaResult.CreateFromDiscriminatorValue); } },
                {"ThemeVideosResult", n => { ThemeVideosResult = n.GetObjectValue<ThemeMediaResult>(ThemeMediaResult.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ThemeMediaResult>("SoundtrackSongsResult", SoundtrackSongsResult);
            writer.WriteObjectValue<ThemeMediaResult>("ThemeSongsResult", ThemeSongsResult);
            writer.WriteObjectValue<ThemeMediaResult>("ThemeVideosResult", ThemeVideosResult);
        }
    }
}
