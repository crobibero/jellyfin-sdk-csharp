// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Represents the server configuration.
    /// </summary>
    public class ServerConfiguration : IParsable {
        /// <summary>Gets or sets the number of days we should retain activity logs.</summary>
        public int? ActivityLogRetentionDays { get; set; }
        /// <summary>Gets or sets a value indicating whether clients should be allowed to upload logs.</summary>
        public bool? AllowClientLogUpload { get; set; }
        /// <summary>Gets or sets the cache path.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CachePath { get; set; }
#nullable restore
#else
        public string CachePath { get; set; }
#endif
        /// <summary>The CodecsUsed property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CodecsUsed { get; set; }
#nullable restore
#else
        public List<string> CodecsUsed { get; set; }
#endif
        /// <summary>The ContentTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<NameValuePair>? ContentTypes { get; set; }
#nullable restore
#else
        public List<NameValuePair> ContentTypes { get; set; }
#endif
        /// <summary>Gets or sets the cors hosts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CorsHosts { get; set; }
#nullable restore
#else
        public List<string> CorsHosts { get; set; }
#endif
        /// <summary>The DisableLiveTvChannelUserDataName property</summary>
        public bool? DisableLiveTvChannelUserDataName { get; set; }
        /// <summary>The DisplaySpecialsWithinSeasons property</summary>
        public bool? DisplaySpecialsWithinSeasons { get; set; }
        /// <summary>Gets or sets a value indicating whether [enable case sensitive item ids].</summary>
        public bool? EnableCaseSensitiveItemIds { get; set; }
        /// <summary>The EnableExternalContentInSuggestions property</summary>
        public bool? EnableExternalContentInSuggestions { get; set; }
        /// <summary>The EnableFolderView property</summary>
        public bool? EnableFolderView { get; set; }
        /// <summary>The EnableGroupingIntoCollections property</summary>
        public bool? EnableGroupingIntoCollections { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable prometheus metrics exporting.</summary>
        public bool? EnableMetrics { get; set; }
        /// <summary>The EnableNormalizedItemByNameIds property</summary>
        public bool? EnableNormalizedItemByNameIds { get; set; }
        /// <summary>Gets or sets a value indicating whether slow server responses should be logged as a warning.</summary>
        public bool? EnableSlowResponseWarning { get; set; }
        /// <summary>The ImageExtractionTimeoutMs property</summary>
        public int? ImageExtractionTimeoutMs { get; set; }
        /// <summary>Gets or sets the image saving convention.</summary>
        public Jellyfin.Sdk.Generated.Models.ImageSavingConvention? ImageSavingConvention { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is port authorized.</summary>
        public bool? IsPortAuthorized { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is first run.</summary>
        public bool? IsStartupWizardCompleted { get; set; }
        /// <summary>Gets or sets the how many metadata refreshes can run concurrently.</summary>
        public int? LibraryMetadataRefreshConcurrency { get; set; }
        /// <summary>Gets or sets the delay in seconds that we will wait after a file system change to try and discover what has been added/removedSome delay is necessary with some items because their creation is not atomic.  It involves the creation of severaldifferent directories and files.</summary>
        public int? LibraryMonitorDelay { get; set; }
        /// <summary>Gets or sets the how the library scan fans out.</summary>
        public int? LibraryScanFanoutConcurrency { get; set; }
        /// <summary>Gets or sets the number of days we should retain log files.</summary>
        public int? LogFileRetentionDays { get; set; }
        /// <summary>Gets or sets the remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.</summary>
        public int? MaxAudiobookResume { get; set; }
        /// <summary>Gets or sets the maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.</summary>
        public int? MaxResumePct { get; set; }
        /// <summary>Gets or sets the metadata country code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetadataCountryCode { get; set; }
#nullable restore
#else
        public string MetadataCountryCode { get; set; }
#endif
        /// <summary>The MetadataNetworkPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetadataNetworkPath { get; set; }
#nullable restore
#else
        public string MetadataNetworkPath { get; set; }
#endif
        /// <summary>The MetadataOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Jellyfin.Sdk.Generated.Models.MetadataOptions>? MetadataOptions { get; set; }
#nullable restore
#else
        public List<Jellyfin.Sdk.Generated.Models.MetadataOptions> MetadataOptions { get; set; }
#endif
        /// <summary>Gets or sets the metadata path.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetadataPath { get; set; }
#nullable restore
#else
        public string MetadataPath { get; set; }
#endif
        /// <summary>Gets or sets the minimum minutes of a book that must be played in order for playstate to be updated.</summary>
        public int? MinAudiobookResume { get; set; }
        /// <summary>Gets or sets the minimum duration that an item must have in order to be eligible for playstate updates..</summary>
        public int? MinResumeDurationSeconds { get; set; }
        /// <summary>Gets or sets the minimum percentage of an item that must be played in order for playstate to be updated.</summary>
        public int? MinResumePct { get; set; }
        /// <summary>The PathSubstitutions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<PathSubstitution>? PathSubstitutions { get; set; }
#nullable restore
#else
        public List<PathSubstitution> PathSubstitutions { get; set; }
#endif
        /// <summary>The PluginRepositories property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RepositoryInfo>? PluginRepositories { get; set; }
#nullable restore
#else
        public List<RepositoryInfo> PluginRepositories { get; set; }
#endif
        /// <summary>Gets or sets the preferred metadata language.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredMetadataLanguage { get; set; }
#nullable restore
#else
        public string PreferredMetadataLanguage { get; set; }
#endif
        /// <summary>Gets or sets the last known version that was ran using the configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousVersion { get; set; }
#nullable restore
#else
        public string PreviousVersion { get; set; }
#endif
        /// <summary>Gets or sets the stringified PreviousVersion to be stored/loaded,because System.Version itself isn&apos;t xml-serializable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousVersionStr { get; set; }
#nullable restore
#else
        public string PreviousVersionStr { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether quick connect is available for use on this server.</summary>
        public bool? QuickConnectAvailable { get; set; }
        /// <summary>The RemoteClientBitrateLimit property</summary>
        public int? RemoteClientBitrateLimit { get; set; }
        /// <summary>Gets or sets a value indicating whether older plugins should automatically be deleted from the plugin folder.</summary>
        public bool? RemoveOldPlugins { get; set; }
        /// <summary>The SaveMetadataHidden property</summary>
        public bool? SaveMetadataHidden { get; set; }
        /// <summary>The ServerName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerName { get; set; }
#nullable restore
#else
        public string ServerName { get; set; }
#endif
        /// <summary>The SkipDeserializationForBasicTypes property</summary>
        public bool? SkipDeserializationForBasicTypes { get; set; }
        /// <summary>Gets or sets the threshold for the slow response time warning in ms.</summary>
        public long? SlowResponseThresholdMs { get; set; }
        /// <summary>Gets or sets characters to be removed from strings to create a sort name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SortRemoveCharacters { get; set; }
#nullable restore
#else
        public List<string> SortRemoveCharacters { get; set; }
#endif
        /// <summary>Gets or sets words to be removed from strings to create a sort name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SortRemoveWords { get; set; }
#nullable restore
#else
        public List<string> SortRemoveWords { get; set; }
#endif
        /// <summary>Gets or sets characters to be replaced with a &apos; &apos; in strings to create a sort name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SortReplaceCharacters { get; set; }
#nullable restore
#else
        public List<string> SortReplaceCharacters { get; set; }
#endif
        /// <summary>The UICulture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UICulture { get; set; }
#nullable restore
#else
        public string UICulture { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ServerConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ServerConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ActivityLogRetentionDays", n => { ActivityLogRetentionDays = n.GetIntValue(); } },
                {"AllowClientLogUpload", n => { AllowClientLogUpload = n.GetBoolValue(); } },
                {"CachePath", n => { CachePath = n.GetStringValue(); } },
                {"CodecsUsed", n => { CodecsUsed = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"ContentTypes", n => { ContentTypes = n.GetCollectionOfObjectValues<NameValuePair>(NameValuePair.CreateFromDiscriminatorValue)?.ToList(); } },
                {"CorsHosts", n => { CorsHosts = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"DisableLiveTvChannelUserDataName", n => { DisableLiveTvChannelUserDataName = n.GetBoolValue(); } },
                {"DisplaySpecialsWithinSeasons", n => { DisplaySpecialsWithinSeasons = n.GetBoolValue(); } },
                {"EnableCaseSensitiveItemIds", n => { EnableCaseSensitiveItemIds = n.GetBoolValue(); } },
                {"EnableExternalContentInSuggestions", n => { EnableExternalContentInSuggestions = n.GetBoolValue(); } },
                {"EnableFolderView", n => { EnableFolderView = n.GetBoolValue(); } },
                {"EnableGroupingIntoCollections", n => { EnableGroupingIntoCollections = n.GetBoolValue(); } },
                {"EnableMetrics", n => { EnableMetrics = n.GetBoolValue(); } },
                {"EnableNormalizedItemByNameIds", n => { EnableNormalizedItemByNameIds = n.GetBoolValue(); } },
                {"EnableSlowResponseWarning", n => { EnableSlowResponseWarning = n.GetBoolValue(); } },
                {"ImageExtractionTimeoutMs", n => { ImageExtractionTimeoutMs = n.GetIntValue(); } },
                {"ImageSavingConvention", n => { ImageSavingConvention = n.GetEnumValue<ImageSavingConvention>(); } },
                {"IsPortAuthorized", n => { IsPortAuthorized = n.GetBoolValue(); } },
                {"IsStartupWizardCompleted", n => { IsStartupWizardCompleted = n.GetBoolValue(); } },
                {"LibraryMetadataRefreshConcurrency", n => { LibraryMetadataRefreshConcurrency = n.GetIntValue(); } },
                {"LibraryMonitorDelay", n => { LibraryMonitorDelay = n.GetIntValue(); } },
                {"LibraryScanFanoutConcurrency", n => { LibraryScanFanoutConcurrency = n.GetIntValue(); } },
                {"LogFileRetentionDays", n => { LogFileRetentionDays = n.GetIntValue(); } },
                {"MaxAudiobookResume", n => { MaxAudiobookResume = n.GetIntValue(); } },
                {"MaxResumePct", n => { MaxResumePct = n.GetIntValue(); } },
                {"MetadataCountryCode", n => { MetadataCountryCode = n.GetStringValue(); } },
                {"MetadataNetworkPath", n => { MetadataNetworkPath = n.GetStringValue(); } },
                {"MetadataOptions", n => { MetadataOptions = n.GetCollectionOfObjectValues<Jellyfin.Sdk.Generated.Models.MetadataOptions>(Jellyfin.Sdk.Generated.Models.MetadataOptions.CreateFromDiscriminatorValue)?.ToList(); } },
                {"MetadataPath", n => { MetadataPath = n.GetStringValue(); } },
                {"MinAudiobookResume", n => { MinAudiobookResume = n.GetIntValue(); } },
                {"MinResumeDurationSeconds", n => { MinResumeDurationSeconds = n.GetIntValue(); } },
                {"MinResumePct", n => { MinResumePct = n.GetIntValue(); } },
                {"PathSubstitutions", n => { PathSubstitutions = n.GetCollectionOfObjectValues<PathSubstitution>(PathSubstitution.CreateFromDiscriminatorValue)?.ToList(); } },
                {"PluginRepositories", n => { PluginRepositories = n.GetCollectionOfObjectValues<RepositoryInfo>(RepositoryInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"PreferredMetadataLanguage", n => { PreferredMetadataLanguage = n.GetStringValue(); } },
                {"PreviousVersion", n => { PreviousVersion = n.GetStringValue(); } },
                {"PreviousVersionStr", n => { PreviousVersionStr = n.GetStringValue(); } },
                {"QuickConnectAvailable", n => { QuickConnectAvailable = n.GetBoolValue(); } },
                {"RemoteClientBitrateLimit", n => { RemoteClientBitrateLimit = n.GetIntValue(); } },
                {"RemoveOldPlugins", n => { RemoveOldPlugins = n.GetBoolValue(); } },
                {"SaveMetadataHidden", n => { SaveMetadataHidden = n.GetBoolValue(); } },
                {"ServerName", n => { ServerName = n.GetStringValue(); } },
                {"SkipDeserializationForBasicTypes", n => { SkipDeserializationForBasicTypes = n.GetBoolValue(); } },
                {"SlowResponseThresholdMs", n => { SlowResponseThresholdMs = n.GetLongValue(); } },
                {"SortRemoveCharacters", n => { SortRemoveCharacters = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"SortRemoveWords", n => { SortRemoveWords = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"SortReplaceCharacters", n => { SortReplaceCharacters = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"UICulture", n => { UICulture = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("ActivityLogRetentionDays", ActivityLogRetentionDays);
            writer.WriteBoolValue("AllowClientLogUpload", AllowClientLogUpload);
            writer.WriteStringValue("CachePath", CachePath);
            writer.WriteCollectionOfPrimitiveValues<string>("CodecsUsed", CodecsUsed);
            writer.WriteCollectionOfObjectValues<NameValuePair>("ContentTypes", ContentTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("CorsHosts", CorsHosts);
            writer.WriteBoolValue("DisableLiveTvChannelUserDataName", DisableLiveTvChannelUserDataName);
            writer.WriteBoolValue("DisplaySpecialsWithinSeasons", DisplaySpecialsWithinSeasons);
            writer.WriteBoolValue("EnableCaseSensitiveItemIds", EnableCaseSensitiveItemIds);
            writer.WriteBoolValue("EnableExternalContentInSuggestions", EnableExternalContentInSuggestions);
            writer.WriteBoolValue("EnableFolderView", EnableFolderView);
            writer.WriteBoolValue("EnableGroupingIntoCollections", EnableGroupingIntoCollections);
            writer.WriteBoolValue("EnableMetrics", EnableMetrics);
            writer.WriteBoolValue("EnableNormalizedItemByNameIds", EnableNormalizedItemByNameIds);
            writer.WriteBoolValue("EnableSlowResponseWarning", EnableSlowResponseWarning);
            writer.WriteIntValue("ImageExtractionTimeoutMs", ImageExtractionTimeoutMs);
            writer.WriteEnumValue<ImageSavingConvention>("ImageSavingConvention", ImageSavingConvention);
            writer.WriteBoolValue("IsPortAuthorized", IsPortAuthorized);
            writer.WriteBoolValue("IsStartupWizardCompleted", IsStartupWizardCompleted);
            writer.WriteIntValue("LibraryMetadataRefreshConcurrency", LibraryMetadataRefreshConcurrency);
            writer.WriteIntValue("LibraryMonitorDelay", LibraryMonitorDelay);
            writer.WriteIntValue("LibraryScanFanoutConcurrency", LibraryScanFanoutConcurrency);
            writer.WriteIntValue("LogFileRetentionDays", LogFileRetentionDays);
            writer.WriteIntValue("MaxAudiobookResume", MaxAudiobookResume);
            writer.WriteIntValue("MaxResumePct", MaxResumePct);
            writer.WriteStringValue("MetadataCountryCode", MetadataCountryCode);
            writer.WriteStringValue("MetadataNetworkPath", MetadataNetworkPath);
            writer.WriteCollectionOfObjectValues<Jellyfin.Sdk.Generated.Models.MetadataOptions>("MetadataOptions", MetadataOptions);
            writer.WriteStringValue("MetadataPath", MetadataPath);
            writer.WriteIntValue("MinAudiobookResume", MinAudiobookResume);
            writer.WriteIntValue("MinResumeDurationSeconds", MinResumeDurationSeconds);
            writer.WriteIntValue("MinResumePct", MinResumePct);
            writer.WriteCollectionOfObjectValues<PathSubstitution>("PathSubstitutions", PathSubstitutions);
            writer.WriteCollectionOfObjectValues<RepositoryInfo>("PluginRepositories", PluginRepositories);
            writer.WriteStringValue("PreferredMetadataLanguage", PreferredMetadataLanguage);
            writer.WriteStringValue("PreviousVersion", PreviousVersion);
            writer.WriteStringValue("PreviousVersionStr", PreviousVersionStr);
            writer.WriteBoolValue("QuickConnectAvailable", QuickConnectAvailable);
            writer.WriteIntValue("RemoteClientBitrateLimit", RemoteClientBitrateLimit);
            writer.WriteBoolValue("RemoveOldPlugins", RemoveOldPlugins);
            writer.WriteBoolValue("SaveMetadataHidden", SaveMetadataHidden);
            writer.WriteStringValue("ServerName", ServerName);
            writer.WriteBoolValue("SkipDeserializationForBasicTypes", SkipDeserializationForBasicTypes);
            writer.WriteLongValue("SlowResponseThresholdMs", SlowResponseThresholdMs);
            writer.WriteCollectionOfPrimitiveValues<string>("SortRemoveCharacters", SortRemoveCharacters);
            writer.WriteCollectionOfPrimitiveValues<string>("SortRemoveWords", SortRemoveWords);
            writer.WriteCollectionOfPrimitiveValues<string>("SortReplaceCharacters", SortReplaceCharacters);
            writer.WriteStringValue("UICulture", UICulture);
        }
    }
}
