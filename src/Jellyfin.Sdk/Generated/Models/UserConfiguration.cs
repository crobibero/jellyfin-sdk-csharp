// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class UserConfiguration.
    /// </summary>
    public class UserConfiguration : IParsable {
        /// <summary>Gets or sets the audio language preference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioLanguagePreference { get; set; }
#nullable restore
#else
        public string AudioLanguagePreference { get; set; }
#endif
        /// <summary>The DisplayCollectionsView property</summary>
        public bool? DisplayCollectionsView { get; set; }
        /// <summary>The DisplayMissingEpisodes property</summary>
        public bool? DisplayMissingEpisodes { get; set; }
        /// <summary>The EnableLocalPassword property</summary>
        public bool? EnableLocalPassword { get; set; }
        /// <summary>The EnableNextEpisodeAutoPlay property</summary>
        public bool? EnableNextEpisodeAutoPlay { get; set; }
        /// <summary>The GroupedFolders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? GroupedFolders { get; set; }
#nullable restore
#else
        public List<string> GroupedFolders { get; set; }
#endif
        /// <summary>The HidePlayedInLatest property</summary>
        public bool? HidePlayedInLatest { get; set; }
        /// <summary>The LatestItemsExcludes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? LatestItemsExcludes { get; set; }
#nullable restore
#else
        public List<string> LatestItemsExcludes { get; set; }
#endif
        /// <summary>The MyMediaExcludes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MyMediaExcludes { get; set; }
#nullable restore
#else
        public List<string> MyMediaExcludes { get; set; }
#endif
        /// <summary>The OrderedViews property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OrderedViews { get; set; }
#nullable restore
#else
        public List<string> OrderedViews { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether [play default audio track].</summary>
        public bool? PlayDefaultAudioTrack { get; set; }
        /// <summary>The RememberAudioSelections property</summary>
        public bool? RememberAudioSelections { get; set; }
        /// <summary>The RememberSubtitleSelections property</summary>
        public bool? RememberSubtitleSelections { get; set; }
        /// <summary>Gets or sets the subtitle language preference.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubtitleLanguagePreference { get; set; }
#nullable restore
#else
        public string SubtitleLanguagePreference { get; set; }
#endif
        /// <summary>An enum representing a subtitle playback mode.</summary>
        public SubtitlePlaybackMode? SubtitleMode { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UserConfiguration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UserConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AudioLanguagePreference", n => { AudioLanguagePreference = n.GetStringValue(); } },
                {"DisplayCollectionsView", n => { DisplayCollectionsView = n.GetBoolValue(); } },
                {"DisplayMissingEpisodes", n => { DisplayMissingEpisodes = n.GetBoolValue(); } },
                {"EnableLocalPassword", n => { EnableLocalPassword = n.GetBoolValue(); } },
                {"EnableNextEpisodeAutoPlay", n => { EnableNextEpisodeAutoPlay = n.GetBoolValue(); } },
                {"GroupedFolders", n => { GroupedFolders = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"HidePlayedInLatest", n => { HidePlayedInLatest = n.GetBoolValue(); } },
                {"LatestItemsExcludes", n => { LatestItemsExcludes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"MyMediaExcludes", n => { MyMediaExcludes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"OrderedViews", n => { OrderedViews = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"PlayDefaultAudioTrack", n => { PlayDefaultAudioTrack = n.GetBoolValue(); } },
                {"RememberAudioSelections", n => { RememberAudioSelections = n.GetBoolValue(); } },
                {"RememberSubtitleSelections", n => { RememberSubtitleSelections = n.GetBoolValue(); } },
                {"SubtitleLanguagePreference", n => { SubtitleLanguagePreference = n.GetStringValue(); } },
                {"SubtitleMode", n => { SubtitleMode = n.GetEnumValue<SubtitlePlaybackMode>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AudioLanguagePreference", AudioLanguagePreference);
            writer.WriteBoolValue("DisplayCollectionsView", DisplayCollectionsView);
            writer.WriteBoolValue("DisplayMissingEpisodes", DisplayMissingEpisodes);
            writer.WriteBoolValue("EnableLocalPassword", EnableLocalPassword);
            writer.WriteBoolValue("EnableNextEpisodeAutoPlay", EnableNextEpisodeAutoPlay);
            writer.WriteCollectionOfPrimitiveValues<string>("GroupedFolders", GroupedFolders);
            writer.WriteBoolValue("HidePlayedInLatest", HidePlayedInLatest);
            writer.WriteCollectionOfPrimitiveValues<string>("LatestItemsExcludes", LatestItemsExcludes);
            writer.WriteCollectionOfPrimitiveValues<string>("MyMediaExcludes", MyMediaExcludes);
            writer.WriteCollectionOfPrimitiveValues<string>("OrderedViews", OrderedViews);
            writer.WriteBoolValue("PlayDefaultAudioTrack", PlayDefaultAudioTrack);
            writer.WriteBoolValue("RememberAudioSelections", RememberAudioSelections);
            writer.WriteBoolValue("RememberSubtitleSelections", RememberSubtitleSelections);
            writer.WriteStringValue("SubtitleLanguagePreference", SubtitleLanguagePreference);
            writer.WriteEnumValue<SubtitlePlaybackMode>("SubtitleMode", SubtitleMode);
        }
    }
}
