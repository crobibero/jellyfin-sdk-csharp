// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Library type options dto.
    /// </summary>
    public class LibraryTypeOptionsDto : IParsable {
        /// <summary>Gets or sets the default image options.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ImageOption>? DefaultImageOptions { get; set; }
#nullable restore
#else
        public List<ImageOption> DefaultImageOptions { get; set; }
#endif
        /// <summary>Gets or sets the image fetchers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<LibraryOptionInfoDto>? ImageFetchers { get; set; }
#nullable restore
#else
        public List<LibraryOptionInfoDto> ImageFetchers { get; set; }
#endif
        /// <summary>Gets or sets the metadata fetchers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<LibraryOptionInfoDto>? MetadataFetchers { get; set; }
#nullable restore
#else
        public List<LibraryOptionInfoDto> MetadataFetchers { get; set; }
#endif
        /// <summary>Gets or sets the supported image types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ImageType?>? SupportedImageTypes { get; set; }
#nullable restore
#else
        public List<ImageType?> SupportedImageTypes { get; set; }
#endif
        /// <summary>Gets or sets the type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LibraryTypeOptionsDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LibraryTypeOptionsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"DefaultImageOptions", n => { DefaultImageOptions = n.GetCollectionOfObjectValues<ImageOption>(ImageOption.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ImageFetchers", n => { ImageFetchers = n.GetCollectionOfObjectValues<LibraryOptionInfoDto>(LibraryOptionInfoDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"MetadataFetchers", n => { MetadataFetchers = n.GetCollectionOfObjectValues<LibraryOptionInfoDto>(LibraryOptionInfoDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"SupportedImageTypes", n => { SupportedImageTypes = n.GetCollectionOfEnumValues<ImageType>()?.ToList(); } },
                {"Type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ImageOption>("DefaultImageOptions", DefaultImageOptions);
            writer.WriteCollectionOfObjectValues<LibraryOptionInfoDto>("ImageFetchers", ImageFetchers);
            writer.WriteCollectionOfObjectValues<LibraryOptionInfoDto>("MetadataFetchers", MetadataFetchers);
            writer.WriteCollectionOfEnumValues<ImageType>("SupportedImageTypes", SupportedImageTypes);
            writer.WriteStringValue("Type", Type);
        }
    }
}
