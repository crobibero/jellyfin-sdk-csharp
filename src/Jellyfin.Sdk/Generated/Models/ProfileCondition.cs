// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class ProfileCondition : IParsable {
        /// <summary>The Condition property</summary>
        public ProfileConditionType? Condition { get; set; }
        /// <summary>The IsRequired property</summary>
        public bool? IsRequired { get; set; }
        /// <summary>The Property property</summary>
        public ProfileConditionValue? Property { get; set; }
        /// <summary>The Value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ProfileCondition CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ProfileCondition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Condition", n => { Condition = n.GetEnumValue<ProfileConditionType>(); } },
                {"IsRequired", n => { IsRequired = n.GetBoolValue(); } },
                {"Property", n => { Property = n.GetEnumValue<ProfileConditionValue>(); } },
                {"Value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<ProfileConditionType>("Condition", Condition);
            writer.WriteBoolValue("IsRequired", IsRequired);
            writer.WriteEnumValue<ProfileConditionValue>("Property", Property);
            writer.WriteStringValue("Value", Value);
        }
    }
}
