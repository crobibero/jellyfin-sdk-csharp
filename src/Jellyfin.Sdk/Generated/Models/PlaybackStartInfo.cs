// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class PlaybackStartInfo.
    /// </summary>
    public class PlaybackStartInfo : IParsable {
        /// <summary>The AspectRatio property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AspectRatio { get; set; }
#nullable restore
#else
        public string AspectRatio { get; set; }
#endif
        /// <summary>Gets or sets the index of the audio stream.</summary>
        public int? AudioStreamIndex { get; set; }
        /// <summary>The Brightness property</summary>
        public int? Brightness { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance can seek.</summary>
        public bool? CanSeek { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is muted.</summary>
        public bool? IsMuted { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is paused.</summary>
        public bool? IsPaused { get; set; }
        /// <summary>Gets or sets the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BaseItemDto? Item { get; set; }
#nullable restore
#else
        public BaseItemDto Item { get; set; }
#endif
        /// <summary>Gets or sets the item identifier.</summary>
        public Guid? ItemId { get; set; }
        /// <summary>Gets or sets the live stream identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LiveStreamId { get; set; }
#nullable restore
#else
        public string LiveStreamId { get; set; }
#endif
        /// <summary>Gets or sets the media version identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaSourceId { get; set; }
#nullable restore
#else
        public string MediaSourceId { get; set; }
#endif
        /// <summary>The NowPlayingQueue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<QueueItem>? NowPlayingQueue { get; set; }
#nullable restore
#else
        public List<QueueItem> NowPlayingQueue { get; set; }
#endif
        /// <summary>The PlaybackStartTimeTicks property</summary>
        public long? PlaybackStartTimeTicks { get; set; }
        /// <summary>The PlaylistItemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaylistItemId { get; set; }
#nullable restore
#else
        public string PlaylistItemId { get; set; }
#endif
        /// <summary>Gets or sets the play method.</summary>
        public Jellyfin.Sdk.Generated.Models.PlayMethod? PlayMethod { get; set; }
        /// <summary>Gets or sets the play session identifier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaySessionId { get; set; }
#nullable restore
#else
        public string PlaySessionId { get; set; }
#endif
        /// <summary>Gets or sets the position ticks.</summary>
        public long? PositionTicks { get; set; }
        /// <summary>Gets or sets the repeat mode.</summary>
        public Jellyfin.Sdk.Generated.Models.RepeatMode? RepeatMode { get; set; }
        /// <summary>Gets or sets the session id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SessionId { get; set; }
#nullable restore
#else
        public string SessionId { get; set; }
#endif
        /// <summary>Gets or sets the index of the subtitle stream.</summary>
        public int? SubtitleStreamIndex { get; set; }
        /// <summary>Gets or sets the volume level.</summary>
        public int? VolumeLevel { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PlaybackStartInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PlaybackStartInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PlaybackStartInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AspectRatio", n => { AspectRatio = n.GetStringValue(); } },
                {"AudioStreamIndex", n => { AudioStreamIndex = n.GetIntValue(); } },
                {"Brightness", n => { Brightness = n.GetIntValue(); } },
                {"CanSeek", n => { CanSeek = n.GetBoolValue(); } },
                {"IsMuted", n => { IsMuted = n.GetBoolValue(); } },
                {"IsPaused", n => { IsPaused = n.GetBoolValue(); } },
                {"Item", n => { Item = n.GetObjectValue<BaseItemDto>(BaseItemDto.CreateFromDiscriminatorValue); } },
                {"ItemId", n => { ItemId = n.GetGuidValue(); } },
                {"LiveStreamId", n => { LiveStreamId = n.GetStringValue(); } },
                {"MediaSourceId", n => { MediaSourceId = n.GetStringValue(); } },
                {"NowPlayingQueue", n => { NowPlayingQueue = n.GetCollectionOfObjectValues<QueueItem>(QueueItem.CreateFromDiscriminatorValue)?.ToList(); } },
                {"PlayMethod", n => { PlayMethod = n.GetEnumValue<PlayMethod>(); } },
                {"PlaySessionId", n => { PlaySessionId = n.GetStringValue(); } },
                {"PlaybackStartTimeTicks", n => { PlaybackStartTimeTicks = n.GetLongValue(); } },
                {"PlaylistItemId", n => { PlaylistItemId = n.GetStringValue(); } },
                {"PositionTicks", n => { PositionTicks = n.GetLongValue(); } },
                {"RepeatMode", n => { RepeatMode = n.GetEnumValue<RepeatMode>(); } },
                {"SessionId", n => { SessionId = n.GetStringValue(); } },
                {"SubtitleStreamIndex", n => { SubtitleStreamIndex = n.GetIntValue(); } },
                {"VolumeLevel", n => { VolumeLevel = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AspectRatio", AspectRatio);
            writer.WriteIntValue("AudioStreamIndex", AudioStreamIndex);
            writer.WriteIntValue("Brightness", Brightness);
            writer.WriteBoolValue("CanSeek", CanSeek);
            writer.WriteBoolValue("IsMuted", IsMuted);
            writer.WriteBoolValue("IsPaused", IsPaused);
            writer.WriteObjectValue<BaseItemDto>("Item", Item);
            writer.WriteGuidValue("ItemId", ItemId);
            writer.WriteStringValue("LiveStreamId", LiveStreamId);
            writer.WriteStringValue("MediaSourceId", MediaSourceId);
            writer.WriteCollectionOfObjectValues<QueueItem>("NowPlayingQueue", NowPlayingQueue);
            writer.WriteLongValue("PlaybackStartTimeTicks", PlaybackStartTimeTicks);
            writer.WriteStringValue("PlaylistItemId", PlaylistItemId);
            writer.WriteEnumValue<PlayMethod>("PlayMethod", PlayMethod);
            writer.WriteStringValue("PlaySessionId", PlaySessionId);
            writer.WriteLongValue("PositionTicks", PositionTicks);
            writer.WriteEnumValue<RepeatMode>("RepeatMode", RepeatMode);
            writer.WriteStringValue("SessionId", SessionId);
            writer.WriteIntValue("SubtitleStreamIndex", SubtitleStreamIndex);
            writer.WriteIntValue("VolumeLevel", VolumeLevel);
        }
    }
}
