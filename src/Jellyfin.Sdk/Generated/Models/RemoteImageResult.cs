// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class RemoteImageResult.
    /// </summary>
    public class RemoteImageResult : IParsable 
    {
        /// <summary>Gets or sets the images.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RemoteImageInfo>? Images { get; set; }
#nullable restore
#else
        public List<RemoteImageInfo> Images { get; set; }
#endif
        /// <summary>Gets or sets the providers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Providers { get; set; }
#nullable restore
#else
        public List<string> Providers { get; set; }
#endif
        /// <summary>Gets or sets the total record count.</summary>
        public int? TotalRecordCount { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RemoteImageResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RemoteImageResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RemoteImageResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"Images", n => { Images = n.GetCollectionOfObjectValues<RemoteImageInfo>(RemoteImageInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"Providers", n => { Providers = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"TotalRecordCount", n => { TotalRecordCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<RemoteImageInfo>("Images", Images);
            writer.WriteCollectionOfPrimitiveValues<string>("Providers", Providers);
            writer.WriteIntValue("TotalRecordCount", TotalRecordCount);
        }
    }
}
