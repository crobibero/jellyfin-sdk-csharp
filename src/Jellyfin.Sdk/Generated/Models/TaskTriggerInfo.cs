// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class TaskTriggerInfo.
    /// </summary>
    public class TaskTriggerInfo : IParsable {
        /// <summary>Gets or sets the day of week.</summary>
        public DayOfWeekObject? DayOfWeek { get; set; }
        /// <summary>Gets or sets the interval.</summary>
        public long? IntervalTicks { get; set; }
        /// <summary>Gets or sets the maximum runtime ticks.</summary>
        public long? MaxRuntimeTicks { get; set; }
        /// <summary>Gets or sets the time of day.</summary>
        public long? TimeOfDayTicks { get; set; }
        /// <summary>Gets or sets the type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TaskTriggerInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TaskTriggerInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"DayOfWeek", n => { DayOfWeek = n.GetEnumValue<DayOfWeekObject>(); } },
                {"IntervalTicks", n => { IntervalTicks = n.GetLongValue(); } },
                {"MaxRuntimeTicks", n => { MaxRuntimeTicks = n.GetLongValue(); } },
                {"TimeOfDayTicks", n => { TimeOfDayTicks = n.GetLongValue(); } },
                {"Type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<DayOfWeekObject>("DayOfWeek", DayOfWeek);
            writer.WriteLongValue("IntervalTicks", IntervalTicks);
            writer.WriteLongValue("MaxRuntimeTicks", MaxRuntimeTicks);
            writer.WriteLongValue("TimeOfDayTicks", TimeOfDayTicks);
            writer.WriteStringValue("Type", Type);
        }
    }
}
