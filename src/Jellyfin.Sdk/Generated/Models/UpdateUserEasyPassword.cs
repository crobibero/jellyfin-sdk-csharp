// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// The update user easy password request body.
    /// </summary>
    public class UpdateUserEasyPassword : IParsable {
        /// <summary>Gets or sets the new sha1-hashed password.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewPassword { get; set; }
#nullable restore
#else
        public string NewPassword { get; set; }
#endif
        /// <summary>Gets or sets the new password.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewPw { get; set; }
#nullable restore
#else
        public string NewPw { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether to reset the password.</summary>
        public bool? ResetPassword { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="UpdateUserEasyPassword"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UpdateUserEasyPassword CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UpdateUserEasyPassword();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"NewPassword", n => { NewPassword = n.GetStringValue(); } },
                {"NewPw", n => { NewPw = n.GetStringValue(); } },
                {"ResetPassword", n => { ResetPassword = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("NewPassword", NewPassword);
            writer.WriteStringValue("NewPw", NewPw);
            writer.WriteBoolValue("ResetPassword", ResetPassword);
        }
    }
}
