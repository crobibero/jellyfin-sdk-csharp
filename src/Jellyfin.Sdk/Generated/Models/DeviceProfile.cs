// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.&lt;br /&gt;Specifically, it defines the supported &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles&quot;&gt;containers&lt;/see&gt; and&lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)the device is able to direct play (without transcoding or remuxing),as well as which &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&apos;t.
    /// </summary>
    public class DeviceProfile : IParsable {
        /// <summary>Gets or sets the AlbumArtPn.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlbumArtPn { get; set; }
#nullable restore
#else
        public string AlbumArtPn { get; set; }
#endif
        /// <summary>Gets or sets the codec profiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CodecProfile>? CodecProfiles { get; set; }
#nullable restore
#else
        public List<CodecProfile> CodecProfiles { get; set; }
#endif
        /// <summary>Gets or sets the container profiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ContainerProfile>? ContainerProfiles { get; set; }
#nullable restore
#else
        public List<ContainerProfile> ContainerProfiles { get; set; }
#endif
        /// <summary>Gets or sets the direct play profiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<DirectPlayProfile>? DirectPlayProfiles { get; set; }
#nullable restore
#else
        public List<DirectPlayProfile> DirectPlayProfiles { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether EnableAlbumArtInDidl.</summary>
        public bool? EnableAlbumArtInDidl { get; set; }
        /// <summary>Gets or sets a value indicating whether EnableMSMediaReceiverRegistrar.</summary>
        public bool? EnableMSMediaReceiverRegistrar { get; set; }
        /// <summary>Gets or sets a value indicating whether EnableSingleAlbumArtLimit.</summary>
        public bool? EnableSingleAlbumArtLimit { get; set; }
        /// <summary>Gets or sets a value indicating whether EnableSingleSubtitleLimit.</summary>
        public bool? EnableSingleSubtitleLimit { get; set; }
        /// <summary>Gets or sets the friendly name of the device profile, which can be shown to users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FriendlyName { get; set; }
#nullable restore
#else
        public string FriendlyName { get; set; }
#endif
        /// <summary>Gets or sets the Id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Gets or sets the Identification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DeviceIdentification? Identification { get; set; }
#nullable restore
#else
        public DeviceIdentification Identification { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether IgnoreTranscodeByteRangeRequests.</summary>
        public bool? IgnoreTranscodeByteRangeRequests { get; set; }
        /// <summary>Gets or sets the manufacturer of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer { get; set; }
#nullable restore
#else
        public string Manufacturer { get; set; }
#endif
        /// <summary>Gets or sets an url for the manufacturer of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManufacturerUrl { get; set; }
#nullable restore
#else
        public string ManufacturerUrl { get; set; }
#endif
        /// <summary>Gets or sets the MaxAlbumArtHeight.</summary>
        public int? MaxAlbumArtHeight { get; set; }
        /// <summary>Gets or sets the MaxAlbumArtWidth.</summary>
        public int? MaxAlbumArtWidth { get; set; }
        /// <summary>Gets or sets the maximum allowed height of embedded icons.</summary>
        public int? MaxIconHeight { get; set; }
        /// <summary>Gets or sets the maximum allowed width of embedded icons.</summary>
        public int? MaxIconWidth { get; set; }
        /// <summary>Gets or sets the maximum allowed bitrate for statically streamed content (= direct played files).</summary>
        public int? MaxStaticBitrate { get; set; }
        /// <summary>Gets or sets the maximum allowed bitrate for statically streamed (= direct played) music files.</summary>
        public int? MaxStaticMusicBitrate { get; set; }
        /// <summary>Gets or sets the maximum allowed bitrate for all streamed content.</summary>
        public int? MaxStreamingBitrate { get; set; }
        /// <summary>Gets or sets the model description of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelDescription { get; set; }
#nullable restore
#else
        public string ModelDescription { get; set; }
#endif
        /// <summary>Gets or sets the model name of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelName { get; set; }
#nullable restore
#else
        public string ModelName { get; set; }
#endif
        /// <summary>Gets or sets the model number of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelNumber { get; set; }
#nullable restore
#else
        public string ModelNumber { get; set; }
#endif
        /// <summary>Gets or sets the ModelUrl.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModelUrl { get; set; }
#nullable restore
#else
        public string ModelUrl { get; set; }
#endif
        /// <summary>Gets or sets the maximum allowed bitrate for transcoded music streams.</summary>
        public int? MusicStreamingTranscodingBitrate { get; set; }
        /// <summary>Gets or sets the name of this device profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or sets the ProtocolInfo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProtocolInfo { get; set; }
#nullable restore
#else
        public string ProtocolInfo { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether RequiresPlainFolders.</summary>
        public bool? RequiresPlainFolders { get; set; }
        /// <summary>Gets or sets a value indicating whether RequiresPlainVideoItems.</summary>
        public bool? RequiresPlainVideoItems { get; set; }
        /// <summary>Gets or sets the ResponseProfiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ResponseProfile>? ResponseProfiles { get; set; }
#nullable restore
#else
        public List<ResponseProfile> ResponseProfiles { get; set; }
#endif
        /// <summary>Gets or sets the serial number of the device which this profile represents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SerialNumber { get; set; }
#nullable restore
#else
        public string SerialNumber { get; set; }
#endif
        /// <summary>Gets or sets the content of the aggregationFlags element in the urn:schemas-sonycom:av namespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SonyAggregationFlags { get; set; }
#nullable restore
#else
        public string SonyAggregationFlags { get; set; }
#endif
        /// <summary>Gets or sets the subtitle profiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SubtitleProfile>? SubtitleProfiles { get; set; }
#nullable restore
#else
        public List<SubtitleProfile> SubtitleProfiles { get; set; }
#endif
        /// <summary>Gets or sets the SupportedMediaTypes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SupportedMediaTypes { get; set; }
#nullable restore
#else
        public string SupportedMediaTypes { get; set; }
#endif
        /// <summary>Gets or sets the TimelineOffsetSeconds.</summary>
        public int? TimelineOffsetSeconds { get; set; }
        /// <summary>Gets or sets the transcoding profiles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TranscodingProfile>? TranscodingProfiles { get; set; }
#nullable restore
#else
        public List<TranscodingProfile> TranscodingProfiles { get; set; }
#endif
        /// <summary>Gets or sets the UserId.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Gets or sets the XmlRootAttributes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<XmlAttribute>? XmlRootAttributes { get; set; }
#nullable restore
#else
        public List<XmlAttribute> XmlRootAttributes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DeviceProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DeviceProfile CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DeviceProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AlbumArtPn", n => { AlbumArtPn = n.GetStringValue(); } },
                {"CodecProfiles", n => { CodecProfiles = n.GetCollectionOfObjectValues<CodecProfile>(CodecProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ContainerProfiles", n => { ContainerProfiles = n.GetCollectionOfObjectValues<ContainerProfile>(ContainerProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"DirectPlayProfiles", n => { DirectPlayProfiles = n.GetCollectionOfObjectValues<DirectPlayProfile>(DirectPlayProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"EnableAlbumArtInDidl", n => { EnableAlbumArtInDidl = n.GetBoolValue(); } },
                {"EnableMSMediaReceiverRegistrar", n => { EnableMSMediaReceiverRegistrar = n.GetBoolValue(); } },
                {"EnableSingleAlbumArtLimit", n => { EnableSingleAlbumArtLimit = n.GetBoolValue(); } },
                {"EnableSingleSubtitleLimit", n => { EnableSingleSubtitleLimit = n.GetBoolValue(); } },
                {"FriendlyName", n => { FriendlyName = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"Identification", n => { Identification = n.GetObjectValue<DeviceIdentification>(DeviceIdentification.CreateFromDiscriminatorValue); } },
                {"IgnoreTranscodeByteRangeRequests", n => { IgnoreTranscodeByteRangeRequests = n.GetBoolValue(); } },
                {"Manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                {"ManufacturerUrl", n => { ManufacturerUrl = n.GetStringValue(); } },
                {"MaxAlbumArtHeight", n => { MaxAlbumArtHeight = n.GetIntValue(); } },
                {"MaxAlbumArtWidth", n => { MaxAlbumArtWidth = n.GetIntValue(); } },
                {"MaxIconHeight", n => { MaxIconHeight = n.GetIntValue(); } },
                {"MaxIconWidth", n => { MaxIconWidth = n.GetIntValue(); } },
                {"MaxStaticBitrate", n => { MaxStaticBitrate = n.GetIntValue(); } },
                {"MaxStaticMusicBitrate", n => { MaxStaticMusicBitrate = n.GetIntValue(); } },
                {"MaxStreamingBitrate", n => { MaxStreamingBitrate = n.GetIntValue(); } },
                {"ModelDescription", n => { ModelDescription = n.GetStringValue(); } },
                {"ModelName", n => { ModelName = n.GetStringValue(); } },
                {"ModelNumber", n => { ModelNumber = n.GetStringValue(); } },
                {"ModelUrl", n => { ModelUrl = n.GetStringValue(); } },
                {"MusicStreamingTranscodingBitrate", n => { MusicStreamingTranscodingBitrate = n.GetIntValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"ProtocolInfo", n => { ProtocolInfo = n.GetStringValue(); } },
                {"RequiresPlainFolders", n => { RequiresPlainFolders = n.GetBoolValue(); } },
                {"RequiresPlainVideoItems", n => { RequiresPlainVideoItems = n.GetBoolValue(); } },
                {"ResponseProfiles", n => { ResponseProfiles = n.GetCollectionOfObjectValues<ResponseProfile>(ResponseProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"SerialNumber", n => { SerialNumber = n.GetStringValue(); } },
                {"SonyAggregationFlags", n => { SonyAggregationFlags = n.GetStringValue(); } },
                {"SubtitleProfiles", n => { SubtitleProfiles = n.GetCollectionOfObjectValues<SubtitleProfile>(SubtitleProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"SupportedMediaTypes", n => { SupportedMediaTypes = n.GetStringValue(); } },
                {"TimelineOffsetSeconds", n => { TimelineOffsetSeconds = n.GetIntValue(); } },
                {"TranscodingProfiles", n => { TranscodingProfiles = n.GetCollectionOfObjectValues<TranscodingProfile>(TranscodingProfile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"UserId", n => { UserId = n.GetStringValue(); } },
                {"XmlRootAttributes", n => { XmlRootAttributes = n.GetCollectionOfObjectValues<XmlAttribute>(XmlAttribute.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AlbumArtPn", AlbumArtPn);
            writer.WriteCollectionOfObjectValues<CodecProfile>("CodecProfiles", CodecProfiles);
            writer.WriteCollectionOfObjectValues<ContainerProfile>("ContainerProfiles", ContainerProfiles);
            writer.WriteCollectionOfObjectValues<DirectPlayProfile>("DirectPlayProfiles", DirectPlayProfiles);
            writer.WriteBoolValue("EnableAlbumArtInDidl", EnableAlbumArtInDidl);
            writer.WriteBoolValue("EnableMSMediaReceiverRegistrar", EnableMSMediaReceiverRegistrar);
            writer.WriteBoolValue("EnableSingleAlbumArtLimit", EnableSingleAlbumArtLimit);
            writer.WriteBoolValue("EnableSingleSubtitleLimit", EnableSingleSubtitleLimit);
            writer.WriteStringValue("FriendlyName", FriendlyName);
            writer.WriteStringValue("Id", Id);
            writer.WriteObjectValue<DeviceIdentification>("Identification", Identification);
            writer.WriteBoolValue("IgnoreTranscodeByteRangeRequests", IgnoreTranscodeByteRangeRequests);
            writer.WriteStringValue("Manufacturer", Manufacturer);
            writer.WriteStringValue("ManufacturerUrl", ManufacturerUrl);
            writer.WriteIntValue("MaxAlbumArtHeight", MaxAlbumArtHeight);
            writer.WriteIntValue("MaxAlbumArtWidth", MaxAlbumArtWidth);
            writer.WriteIntValue("MaxIconHeight", MaxIconHeight);
            writer.WriteIntValue("MaxIconWidth", MaxIconWidth);
            writer.WriteIntValue("MaxStaticBitrate", MaxStaticBitrate);
            writer.WriteIntValue("MaxStaticMusicBitrate", MaxStaticMusicBitrate);
            writer.WriteIntValue("MaxStreamingBitrate", MaxStreamingBitrate);
            writer.WriteStringValue("ModelDescription", ModelDescription);
            writer.WriteStringValue("ModelName", ModelName);
            writer.WriteStringValue("ModelNumber", ModelNumber);
            writer.WriteStringValue("ModelUrl", ModelUrl);
            writer.WriteIntValue("MusicStreamingTranscodingBitrate", MusicStreamingTranscodingBitrate);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("ProtocolInfo", ProtocolInfo);
            writer.WriteBoolValue("RequiresPlainFolders", RequiresPlainFolders);
            writer.WriteBoolValue("RequiresPlainVideoItems", RequiresPlainVideoItems);
            writer.WriteCollectionOfObjectValues<ResponseProfile>("ResponseProfiles", ResponseProfiles);
            writer.WriteStringValue("SerialNumber", SerialNumber);
            writer.WriteStringValue("SonyAggregationFlags", SonyAggregationFlags);
            writer.WriteCollectionOfObjectValues<SubtitleProfile>("SubtitleProfiles", SubtitleProfiles);
            writer.WriteStringValue("SupportedMediaTypes", SupportedMediaTypes);
            writer.WriteIntValue("TimelineOffsetSeconds", TimelineOffsetSeconds);
            writer.WriteCollectionOfObjectValues<TranscodingProfile>("TranscodingProfiles", TranscodingProfiles);
            writer.WriteStringValue("UserId", UserId);
            writer.WriteCollectionOfObjectValues<XmlAttribute>("XmlRootAttributes", XmlRootAttributes);
        }
    }
}
