// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class DirectPlayProfile : IParsable {
        /// <summary>The AudioCodec property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioCodec { get; set; }
#nullable restore
#else
        public string AudioCodec { get; set; }
#endif
        /// <summary>The Container property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Container { get; set; }
#nullable restore
#else
        public string Container { get; set; }
#endif
        /// <summary>The Type property</summary>
        public DlnaProfileType? Type { get; set; }
        /// <summary>The VideoCodec property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoCodec { get; set; }
#nullable restore
#else
        public string VideoCodec { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DirectPlayProfile CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DirectPlayProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AudioCodec", n => { AudioCodec = n.GetStringValue(); } },
                {"Container", n => { Container = n.GetStringValue(); } },
                {"Type", n => { Type = n.GetEnumValue<DlnaProfileType>(); } },
                {"VideoCodec", n => { VideoCodec = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AudioCodec", AudioCodec);
            writer.WriteStringValue("Container", Container);
            writer.WriteEnumValue<DlnaProfileType>("Type", Type);
            writer.WriteStringValue("VideoCodec", VideoCodec);
        }
    }
}
