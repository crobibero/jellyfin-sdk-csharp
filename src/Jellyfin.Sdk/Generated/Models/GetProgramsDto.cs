// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Get programs dto.
    /// </summary>
    public class GetProgramsDto : IParsable {
        /// <summary>Gets or sets the channels to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ChannelIds { get; set; }
#nullable restore
#else
        public List<Guid?> ChannelIds { get; set; }
#endif
        /// <summary>Gets or sets include image information in output.Optional.</summary>
        public bool? EnableImages { get; set; }
        /// <summary>Gets or sets the image types to include in the output.Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ImageType?>? EnableImageTypes { get; set; }
#nullable restore
#else
        public List<ImageType?> EnableImageTypes { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether retrieve total record count.</summary>
        public bool? EnableTotalRecordCount { get; set; }
        /// <summary>Gets or sets include user data.Optional.</summary>
        public bool? EnableUserData { get; set; }
        /// <summary>Gets or sets specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ItemFields?>? Fields { get; set; }
#nullable restore
#else
        public List<ItemFields?> Fields { get; set; }
#endif
        /// <summary>Gets or sets the genre ids to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? GenreIds { get; set; }
#nullable restore
#else
        public List<Guid?> GenreIds { get; set; }
#endif
        /// <summary>Gets or sets the genres to return guide information for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Genres { get; set; }
#nullable restore
#else
        public List<string> Genres { get; set; }
#endif
        /// <summary>Gets or sets filter by programs that have completed airing, or not.Optional.</summary>
        public bool? HasAired { get; set; }
        /// <summary>Gets or sets the max number of images to return, per image type.Optional.</summary>
        public int? ImageTypeLimit { get; set; }
        /// <summary>Gets or sets filter by programs that are currently airing, or not.Optional.</summary>
        public bool? IsAiring { get; set; }
        /// <summary>Gets or sets filter for kids.Optional.</summary>
        public bool? IsKids { get; set; }
        /// <summary>Gets or sets filter for movies.Optional.</summary>
        public bool? IsMovie { get; set; }
        /// <summary>Gets or sets filter for news.Optional.</summary>
        public bool? IsNews { get; set; }
        /// <summary>Gets or sets filter for series.Optional.</summary>
        public bool? IsSeries { get; set; }
        /// <summary>Gets or sets filter for sports.Optional.</summary>
        public bool? IsSports { get; set; }
        /// <summary>Gets or sets filter by library series id.Optional.</summary>
        public Guid? LibrarySeriesId { get; set; }
        /// <summary>Gets or sets the maximum number of records to return.Optional.</summary>
        public int? Limit { get; set; }
        /// <summary>Gets or sets the maximum premiere end date.Optional.</summary>
        public DateTimeOffset? MaxEndDate { get; set; }
        /// <summary>Gets or sets the maximum premiere start date.Optional.</summary>
        public DateTimeOffset? MaxStartDate { get; set; }
        /// <summary>Gets or sets the minimum premiere end date.Optional.</summary>
        public DateTimeOffset? MinEndDate { get; set; }
        /// <summary>Gets or sets the minimum premiere start date.Optional.</summary>
        public DateTimeOffset? MinStartDate { get; set; }
        /// <summary>Gets or sets filter by series timer id.Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeriesTimerId { get; set; }
#nullable restore
#else
        public string SeriesTimerId { get; set; }
#endif
        /// <summary>Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SortBy { get; set; }
#nullable restore
#else
        public List<string> SortBy { get; set; }
#endif
        /// <summary>Gets or sets sort Order - Ascending,Descending.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Jellyfin.Sdk.Generated.Models.SortOrder?>? SortOrder { get; set; }
#nullable restore
#else
        public List<Jellyfin.Sdk.Generated.Models.SortOrder?> SortOrder { get; set; }
#endif
        /// <summary>Gets or sets the record index to start at. All items with a lower index will be dropped from the results.Optional.</summary>
        public int? StartIndex { get; set; }
        /// <summary>Gets or sets optional. Filter by user id.</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GetProgramsDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GetProgramsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"ChannelIds", n => { ChannelIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"EnableImageTypes", n => { EnableImageTypes = n.GetCollectionOfEnumValues<ImageType>()?.ToList(); } },
                {"EnableImages", n => { EnableImages = n.GetBoolValue(); } },
                {"EnableTotalRecordCount", n => { EnableTotalRecordCount = n.GetBoolValue(); } },
                {"EnableUserData", n => { EnableUserData = n.GetBoolValue(); } },
                {"Fields", n => { Fields = n.GetCollectionOfEnumValues<ItemFields>()?.ToList(); } },
                {"GenreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"Genres", n => { Genres = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"HasAired", n => { HasAired = n.GetBoolValue(); } },
                {"ImageTypeLimit", n => { ImageTypeLimit = n.GetIntValue(); } },
                {"IsAiring", n => { IsAiring = n.GetBoolValue(); } },
                {"IsKids", n => { IsKids = n.GetBoolValue(); } },
                {"IsMovie", n => { IsMovie = n.GetBoolValue(); } },
                {"IsNews", n => { IsNews = n.GetBoolValue(); } },
                {"IsSeries", n => { IsSeries = n.GetBoolValue(); } },
                {"IsSports", n => { IsSports = n.GetBoolValue(); } },
                {"LibrarySeriesId", n => { LibrarySeriesId = n.GetGuidValue(); } },
                {"Limit", n => { Limit = n.GetIntValue(); } },
                {"MaxEndDate", n => { MaxEndDate = n.GetDateTimeOffsetValue(); } },
                {"MaxStartDate", n => { MaxStartDate = n.GetDateTimeOffsetValue(); } },
                {"MinEndDate", n => { MinEndDate = n.GetDateTimeOffsetValue(); } },
                {"MinStartDate", n => { MinStartDate = n.GetDateTimeOffsetValue(); } },
                {"SeriesTimerId", n => { SeriesTimerId = n.GetStringValue(); } },
                {"SortBy", n => { SortBy = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"SortOrder", n => { SortOrder = n.GetCollectionOfEnumValues<Jellyfin.Sdk.Generated.Models.SortOrder>()?.ToList(); } },
                {"StartIndex", n => { StartIndex = n.GetIntValue(); } },
                {"UserId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<Guid?>("ChannelIds", ChannelIds);
            writer.WriteBoolValue("EnableImages", EnableImages);
            writer.WriteCollectionOfEnumValues<ImageType>("EnableImageTypes", EnableImageTypes);
            writer.WriteBoolValue("EnableTotalRecordCount", EnableTotalRecordCount);
            writer.WriteBoolValue("EnableUserData", EnableUserData);
            writer.WriteCollectionOfEnumValues<ItemFields>("Fields", Fields);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("GenreIds", GenreIds);
            writer.WriteCollectionOfPrimitiveValues<string>("Genres", Genres);
            writer.WriteBoolValue("HasAired", HasAired);
            writer.WriteIntValue("ImageTypeLimit", ImageTypeLimit);
            writer.WriteBoolValue("IsAiring", IsAiring);
            writer.WriteBoolValue("IsKids", IsKids);
            writer.WriteBoolValue("IsMovie", IsMovie);
            writer.WriteBoolValue("IsNews", IsNews);
            writer.WriteBoolValue("IsSeries", IsSeries);
            writer.WriteBoolValue("IsSports", IsSports);
            writer.WriteGuidValue("LibrarySeriesId", LibrarySeriesId);
            writer.WriteIntValue("Limit", Limit);
            writer.WriteDateTimeOffsetValue("MaxEndDate", MaxEndDate);
            writer.WriteDateTimeOffsetValue("MaxStartDate", MaxStartDate);
            writer.WriteDateTimeOffsetValue("MinEndDate", MinEndDate);
            writer.WriteDateTimeOffsetValue("MinStartDate", MinStartDate);
            writer.WriteStringValue("SeriesTimerId", SeriesTimerId);
            writer.WriteCollectionOfPrimitiveValues<string>("SortBy", SortBy);
            writer.WriteCollectionOfEnumValues<Jellyfin.Sdk.Generated.Models.SortOrder>("SortOrder", SortOrder);
            writer.WriteIntValue("StartIndex", StartIndex);
            writer.WriteGuidValue("UserId", UserId);
        }
    }
}
