// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class SessionInfo.
    /// </summary>
    public class SessionInfo : IParsable {
        /// <summary>The AdditionalUsers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SessionUserInfo>? AdditionalUsers { get; set; }
#nullable restore
#else
        public List<SessionUserInfo> AdditionalUsers { get; set; }
#endif
        /// <summary>Gets or sets the application version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationVersion { get; set; }
#nullable restore
#else
        public string ApplicationVersion { get; set; }
#endif
        /// <summary>The Capabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ClientCapabilities? Capabilities { get; set; }
#nullable restore
#else
        public ClientCapabilities Capabilities { get; set; }
#endif
        /// <summary>Gets or sets the type of the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Client { get; set; }
#nullable restore
#else
        public string Client { get; set; }
#endif
        /// <summary>Gets or sets the device id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>Gets or sets the name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName { get; set; }
#nullable restore
#else
        public string DeviceName { get; set; }
#endif
        /// <summary>Gets or sets the type of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceType { get; set; }
#nullable restore
#else
        public string DeviceType { get; set; }
#endif
        /// <summary>Class BaseItem.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BaseItem? FullNowPlayingItem { get; set; }
#nullable restore
#else
        public BaseItem FullNowPlayingItem { get; set; }
#endif
        /// <summary>The HasCustomDeviceName property</summary>
        public bool? HasCustomDeviceName { get; set; }
        /// <summary>Gets or sets the id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Gets a value indicating whether this instance is active.</summary>
        public bool? IsActive { get; private set; }
        /// <summary>Gets or sets the last activity date.</summary>
        public DateTimeOffset? LastActivityDate { get; set; }
        /// <summary>Gets or sets the last playback check in.</summary>
        public DateTimeOffset? LastPlaybackCheckIn { get; set; }
        /// <summary>Gets or sets the now playing item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BaseItemDto? NowPlayingItem { get; set; }
#nullable restore
#else
        public BaseItemDto NowPlayingItem { get; set; }
#endif
        /// <summary>The NowPlayingQueue property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<QueueItem>? NowPlayingQueue { get; set; }
#nullable restore
#else
        public List<QueueItem> NowPlayingQueue { get; set; }
#endif
        /// <summary>The NowPlayingQueueFullItems property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<BaseItemDto>? NowPlayingQueueFullItems { get; set; }
#nullable restore
#else
        public List<BaseItemDto> NowPlayingQueueFullItems { get; set; }
#endif
        /// <summary>This is strictly used as a data transfer object from the api layer.This holds information about a BaseItem in a format that is convenient for the client.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public BaseItemDto? NowViewingItem { get; set; }
#nullable restore
#else
        public BaseItemDto NowViewingItem { get; set; }
#endif
        /// <summary>Gets the playable media types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PlayableMediaTypes { get; private set; }
#nullable restore
#else
        public List<string> PlayableMediaTypes { get; private set; }
#endif
        /// <summary>The PlaylistItemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaylistItemId { get; set; }
#nullable restore
#else
        public string PlaylistItemId { get; set; }
#endif
        /// <summary>The PlayState property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PlayerStateInfo? PlayState { get; set; }
#nullable restore
#else
        public PlayerStateInfo PlayState { get; set; }
#endif
        /// <summary>Gets or sets the remote end point.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteEndPoint { get; set; }
#nullable restore
#else
        public string RemoteEndPoint { get; set; }
#endif
        /// <summary>The ServerId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerId { get; set; }
#nullable restore
#else
        public string ServerId { get; set; }
#endif
        /// <summary>Gets the supported commands.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GeneralCommandType?>? SupportedCommands { get; private set; }
#nullable restore
#else
        public List<GeneralCommandType?> SupportedCommands { get; private set; }
#endif
        /// <summary>The SupportsMediaControl property</summary>
        public bool? SupportsMediaControl { get; private set; }
        /// <summary>The SupportsRemoteControl property</summary>
        public bool? SupportsRemoteControl { get; private set; }
        /// <summary>The TranscodingInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Jellyfin.Sdk.Generated.Models.TranscodingInfo? TranscodingInfo { get; set; }
#nullable restore
#else
        public Jellyfin.Sdk.Generated.Models.TranscodingInfo TranscodingInfo { get; set; }
#endif
        /// <summary>Gets or sets the user id.</summary>
        public Guid? UserId { get; set; }
        /// <summary>Gets or sets the username.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>The UserPrimaryImageTag property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrimaryImageTag { get; set; }
#nullable restore
#else
        public string UserPrimaryImageTag { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SessionInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SessionInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SessionInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AdditionalUsers", n => { AdditionalUsers = n.GetCollectionOfObjectValues<SessionUserInfo>(SessionUserInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ApplicationVersion", n => { ApplicationVersion = n.GetStringValue(); } },
                {"Capabilities", n => { Capabilities = n.GetObjectValue<ClientCapabilities>(ClientCapabilities.CreateFromDiscriminatorValue); } },
                {"Client", n => { Client = n.GetStringValue(); } },
                {"DeviceId", n => { DeviceId = n.GetStringValue(); } },
                {"DeviceName", n => { DeviceName = n.GetStringValue(); } },
                {"DeviceType", n => { DeviceType = n.GetStringValue(); } },
                {"FullNowPlayingItem", n => { FullNowPlayingItem = n.GetObjectValue<BaseItem>(BaseItem.CreateFromDiscriminatorValue); } },
                {"HasCustomDeviceName", n => { HasCustomDeviceName = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"IsActive", n => { IsActive = n.GetBoolValue(); } },
                {"LastActivityDate", n => { LastActivityDate = n.GetDateTimeOffsetValue(); } },
                {"LastPlaybackCheckIn", n => { LastPlaybackCheckIn = n.GetDateTimeOffsetValue(); } },
                {"NowPlayingItem", n => { NowPlayingItem = n.GetObjectValue<BaseItemDto>(BaseItemDto.CreateFromDiscriminatorValue); } },
                {"NowPlayingQueue", n => { NowPlayingQueue = n.GetCollectionOfObjectValues<QueueItem>(QueueItem.CreateFromDiscriminatorValue)?.ToList(); } },
                {"NowPlayingQueueFullItems", n => { NowPlayingQueueFullItems = n.GetCollectionOfObjectValues<BaseItemDto>(BaseItemDto.CreateFromDiscriminatorValue)?.ToList(); } },
                {"NowViewingItem", n => { NowViewingItem = n.GetObjectValue<BaseItemDto>(BaseItemDto.CreateFromDiscriminatorValue); } },
                {"PlayState", n => { PlayState = n.GetObjectValue<PlayerStateInfo>(PlayerStateInfo.CreateFromDiscriminatorValue); } },
                {"PlayableMediaTypes", n => { PlayableMediaTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"PlaylistItemId", n => { PlaylistItemId = n.GetStringValue(); } },
                {"RemoteEndPoint", n => { RemoteEndPoint = n.GetStringValue(); } },
                {"ServerId", n => { ServerId = n.GetStringValue(); } },
                {"SupportedCommands", n => { SupportedCommands = n.GetCollectionOfEnumValues<GeneralCommandType>()?.ToList(); } },
                {"SupportsMediaControl", n => { SupportsMediaControl = n.GetBoolValue(); } },
                {"SupportsRemoteControl", n => { SupportsRemoteControl = n.GetBoolValue(); } },
                {"TranscodingInfo", n => { TranscodingInfo = n.GetObjectValue<Jellyfin.Sdk.Generated.Models.TranscodingInfo>(Jellyfin.Sdk.Generated.Models.TranscodingInfo.CreateFromDiscriminatorValue); } },
                {"UserId", n => { UserId = n.GetGuidValue(); } },
                {"UserName", n => { UserName = n.GetStringValue(); } },
                {"UserPrimaryImageTag", n => { UserPrimaryImageTag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<SessionUserInfo>("AdditionalUsers", AdditionalUsers);
            writer.WriteStringValue("ApplicationVersion", ApplicationVersion);
            writer.WriteObjectValue<ClientCapabilities>("Capabilities", Capabilities);
            writer.WriteStringValue("Client", Client);
            writer.WriteStringValue("DeviceId", DeviceId);
            writer.WriteStringValue("DeviceName", DeviceName);
            writer.WriteStringValue("DeviceType", DeviceType);
            writer.WriteObjectValue<BaseItem>("FullNowPlayingItem", FullNowPlayingItem);
            writer.WriteBoolValue("HasCustomDeviceName", HasCustomDeviceName);
            writer.WriteStringValue("Id", Id);
            writer.WriteDateTimeOffsetValue("LastActivityDate", LastActivityDate);
            writer.WriteDateTimeOffsetValue("LastPlaybackCheckIn", LastPlaybackCheckIn);
            writer.WriteObjectValue<BaseItemDto>("NowPlayingItem", NowPlayingItem);
            writer.WriteCollectionOfObjectValues<QueueItem>("NowPlayingQueue", NowPlayingQueue);
            writer.WriteCollectionOfObjectValues<BaseItemDto>("NowPlayingQueueFullItems", NowPlayingQueueFullItems);
            writer.WriteObjectValue<BaseItemDto>("NowViewingItem", NowViewingItem);
            writer.WriteStringValue("PlaylistItemId", PlaylistItemId);
            writer.WriteObjectValue<PlayerStateInfo>("PlayState", PlayState);
            writer.WriteStringValue("RemoteEndPoint", RemoteEndPoint);
            writer.WriteStringValue("ServerId", ServerId);
            writer.WriteObjectValue<Jellyfin.Sdk.Generated.Models.TranscodingInfo>("TranscodingInfo", TranscodingInfo);
            writer.WriteGuidValue("UserId", UserId);
            writer.WriteStringValue("UserName", UserName);
            writer.WriteStringValue("UserPrimaryImageTag", UserPrimaryImageTag);
        }
    }
}
