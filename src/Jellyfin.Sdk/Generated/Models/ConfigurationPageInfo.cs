// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// The configuration page info.
    /// </summary>
    public class ConfigurationPageInfo : IParsable 
    {
        /// <summary>Gets or sets the display name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether the configurations page is enabled in the main menu.</summary>
        public bool? EnableInMainMenu { get; set; }
        /// <summary>Gets or sets the menu icon.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MenuIcon { get; set; }
#nullable restore
#else
        public string MenuIcon { get; set; }
#endif
        /// <summary>Gets or sets the menu section.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MenuSection { get; set; }
#nullable restore
#else
        public string MenuSection { get; set; }
#endif
        /// <summary>Gets or sets the name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or sets the plugin id.</summary>
        public Guid? PluginId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ConfigurationPageInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ConfigurationPageInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConfigurationPageInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"DisplayName", n => { DisplayName = n.GetStringValue(); } },
                {"EnableInMainMenu", n => { EnableInMainMenu = n.GetBoolValue(); } },
                {"MenuIcon", n => { MenuIcon = n.GetStringValue(); } },
                {"MenuSection", n => { MenuSection = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"PluginId", n => { PluginId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("DisplayName", DisplayName);
            writer.WriteBoolValue("EnableInMainMenu", EnableInMainMenu);
            writer.WriteStringValue("MenuIcon", MenuIcon);
            writer.WriteStringValue("MenuSection", MenuSection);
            writer.WriteStringValue("Name", Name);
            writer.WriteGuidValue("PluginId", PluginId);
        }
    }
}
