// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class BaseItem.
    /// </summary>
    public class BaseItem : IParsable {
        /// <summary>The Container property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Container { get; set; }
#nullable restore
#else
        public string Container { get; set; }
#endif
        /// <summary>The DateLastSaved property</summary>
        public DateTimeOffset? DateLastSaved { get; set; }
        /// <summary>The ExtraIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? ExtraIds { get; set; }
#nullable restore
#else
        public List<Guid?> ExtraIds { get; set; }
#endif
        /// <summary>The Height property</summary>
        public int? Height { get; set; }
        /// <summary>The IsHD property</summary>
        public bool? IsHD { get; private set; }
        /// <summary>The IsShortcut property</summary>
        public bool? IsShortcut { get; set; }
        /// <summary>Gets or sets the remote trailers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MediaUrl>? RemoteTrailers { get; set; }
#nullable restore
#else
        public List<MediaUrl> RemoteTrailers { get; set; }
#endif
        /// <summary>The ShortcutPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShortcutPath { get; set; }
#nullable restore
#else
        public string ShortcutPath { get; set; }
#endif
        /// <summary>The Size property</summary>
        public long? Size { get; set; }
        /// <summary>The SupportsExternalTransfer property</summary>
        public bool? SupportsExternalTransfer { get; private set; }
        /// <summary>The Width property</summary>
        public int? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BaseItem CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BaseItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"Container", n => { Container = n.GetStringValue(); } },
                {"DateLastSaved", n => { DateLastSaved = n.GetDateTimeOffsetValue(); } },
                {"ExtraIds", n => { ExtraIds = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"Height", n => { Height = n.GetIntValue(); } },
                {"IsHD", n => { IsHD = n.GetBoolValue(); } },
                {"IsShortcut", n => { IsShortcut = n.GetBoolValue(); } },
                {"RemoteTrailers", n => { RemoteTrailers = n.GetCollectionOfObjectValues<MediaUrl>(MediaUrl.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ShortcutPath", n => { ShortcutPath = n.GetStringValue(); } },
                {"Size", n => { Size = n.GetLongValue(); } },
                {"SupportsExternalTransfer", n => { SupportsExternalTransfer = n.GetBoolValue(); } },
                {"Width", n => { Width = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("Container", Container);
            writer.WriteDateTimeOffsetValue("DateLastSaved", DateLastSaved);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("ExtraIds", ExtraIds);
            writer.WriteIntValue("Height", Height);
            writer.WriteBoolValue("IsShortcut", IsShortcut);
            writer.WriteCollectionOfObjectValues<MediaUrl>("RemoteTrailers", RemoteTrailers);
            writer.WriteStringValue("ShortcutPath", ShortcutPath);
            writer.WriteLongValue("Size", Size);
            writer.WriteIntValue("Width", Width);
        }
    }
}
