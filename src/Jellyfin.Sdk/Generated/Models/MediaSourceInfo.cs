// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    public class MediaSourceInfo : IParsable {
        /// <summary>The AnalyzeDurationMs property</summary>
        public int? AnalyzeDurationMs { get; set; }
        /// <summary>The Bitrate property</summary>
        public int? Bitrate { get; set; }
        /// <summary>The BufferMs property</summary>
        public int? BufferMs { get; set; }
        /// <summary>The Container property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Container { get; set; }
#nullable restore
#else
        public string Container { get; set; }
#endif
        /// <summary>The DefaultAudioStreamIndex property</summary>
        public int? DefaultAudioStreamIndex { get; set; }
        /// <summary>The DefaultSubtitleStreamIndex property</summary>
        public int? DefaultSubtitleStreamIndex { get; set; }
        /// <summary>The EncoderPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncoderPath { get; set; }
#nullable restore
#else
        public string EncoderPath { get; set; }
#endif
        /// <summary>The EncoderProtocol property</summary>
        public MediaProtocol? EncoderProtocol { get; set; }
        /// <summary>The ETag property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ETag { get; set; }
#nullable restore
#else
        public string ETag { get; set; }
#endif
        /// <summary>The Formats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Formats { get; set; }
#nullable restore
#else
        public List<string> Formats { get; set; }
#endif
        /// <summary>The GenPtsInput property</summary>
        public bool? GenPtsInput { get; set; }
        /// <summary>The Id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The IgnoreDts property</summary>
        public bool? IgnoreDts { get; set; }
        /// <summary>The IgnoreIndex property</summary>
        public bool? IgnoreIndex { get; set; }
        /// <summary>The IsInfiniteStream property</summary>
        public bool? IsInfiniteStream { get; set; }
        /// <summary>The IsoType property</summary>
        public Jellyfin.Sdk.Generated.Models.IsoType? IsoType { get; set; }
        /// <summary>Gets or sets a value indicating whether the media is remote.Differentiate internet url vs local network.</summary>
        public bool? IsRemote { get; set; }
        /// <summary>The LiveStreamId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LiveStreamId { get; set; }
#nullable restore
#else
        public string LiveStreamId { get; set; }
#endif
        /// <summary>The MediaAttachments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MediaAttachment>? MediaAttachments { get; set; }
#nullable restore
#else
        public List<MediaAttachment> MediaAttachments { get; set; }
#endif
        /// <summary>The MediaStreams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MediaStream>? MediaStreams { get; set; }
#nullable restore
#else
        public List<MediaStream> MediaStreams { get; set; }
#endif
        /// <summary>The Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The OpenToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OpenToken { get; set; }
#nullable restore
#else
        public string OpenToken { get; set; }
#endif
        /// <summary>The Path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The Protocol property</summary>
        public MediaProtocol? Protocol { get; set; }
        /// <summary>The ReadAtNativeFramerate property</summary>
        public bool? ReadAtNativeFramerate { get; set; }
        /// <summary>The RequiredHttpHeaders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediaSourceInfo_RequiredHttpHeaders? RequiredHttpHeaders { get; set; }
#nullable restore
#else
        public MediaSourceInfo_RequiredHttpHeaders RequiredHttpHeaders { get; set; }
#endif
        /// <summary>The RequiresClosing property</summary>
        public bool? RequiresClosing { get; set; }
        /// <summary>The RequiresLooping property</summary>
        public bool? RequiresLooping { get; set; }
        /// <summary>The RequiresOpening property</summary>
        public bool? RequiresOpening { get; set; }
        /// <summary>The RunTimeTicks property</summary>
        public long? RunTimeTicks { get; set; }
        /// <summary>The Size property</summary>
        public long? Size { get; set; }
        /// <summary>The SupportsDirectPlay property</summary>
        public bool? SupportsDirectPlay { get; set; }
        /// <summary>The SupportsDirectStream property</summary>
        public bool? SupportsDirectStream { get; set; }
        /// <summary>The SupportsProbing property</summary>
        public bool? SupportsProbing { get; set; }
        /// <summary>The SupportsTranscoding property</summary>
        public bool? SupportsTranscoding { get; set; }
        /// <summary>The Timestamp property</summary>
        public TransportStreamTimestamp? Timestamp { get; set; }
        /// <summary>The TranscodingContainer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranscodingContainer { get; set; }
#nullable restore
#else
        public string TranscodingContainer { get; set; }
#endif
        /// <summary>The TranscodingSubProtocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranscodingSubProtocol { get; set; }
#nullable restore
#else
        public string TranscodingSubProtocol { get; set; }
#endif
        /// <summary>The TranscodingUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranscodingUrl { get; set; }
#nullable restore
#else
        public string TranscodingUrl { get; set; }
#endif
        /// <summary>The Type property</summary>
        public MediaSourceType? Type { get; set; }
        /// <summary>The Video3DFormat property</summary>
        public Jellyfin.Sdk.Generated.Models.Video3DFormat? Video3DFormat { get; set; }
        /// <summary>The VideoType property</summary>
        public Jellyfin.Sdk.Generated.Models.VideoType? VideoType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="MediaSourceInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static MediaSourceInfo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new MediaSourceInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AnalyzeDurationMs", n => { AnalyzeDurationMs = n.GetIntValue(); } },
                {"Bitrate", n => { Bitrate = n.GetIntValue(); } },
                {"BufferMs", n => { BufferMs = n.GetIntValue(); } },
                {"Container", n => { Container = n.GetStringValue(); } },
                {"DefaultAudioStreamIndex", n => { DefaultAudioStreamIndex = n.GetIntValue(); } },
                {"DefaultSubtitleStreamIndex", n => { DefaultSubtitleStreamIndex = n.GetIntValue(); } },
                {"ETag", n => { ETag = n.GetStringValue(); } },
                {"EncoderPath", n => { EncoderPath = n.GetStringValue(); } },
                {"EncoderProtocol", n => { EncoderProtocol = n.GetEnumValue<MediaProtocol>(); } },
                {"Formats", n => { Formats = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"GenPtsInput", n => { GenPtsInput = n.GetBoolValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"IgnoreDts", n => { IgnoreDts = n.GetBoolValue(); } },
                {"IgnoreIndex", n => { IgnoreIndex = n.GetBoolValue(); } },
                {"IsInfiniteStream", n => { IsInfiniteStream = n.GetBoolValue(); } },
                {"IsRemote", n => { IsRemote = n.GetBoolValue(); } },
                {"IsoType", n => { IsoType = n.GetEnumValue<IsoType>(); } },
                {"LiveStreamId", n => { LiveStreamId = n.GetStringValue(); } },
                {"MediaAttachments", n => { MediaAttachments = n.GetCollectionOfObjectValues<MediaAttachment>(MediaAttachment.CreateFromDiscriminatorValue)?.ToList(); } },
                {"MediaStreams", n => { MediaStreams = n.GetCollectionOfObjectValues<MediaStream>(MediaStream.CreateFromDiscriminatorValue)?.ToList(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"OpenToken", n => { OpenToken = n.GetStringValue(); } },
                {"Path", n => { Path = n.GetStringValue(); } },
                {"Protocol", n => { Protocol = n.GetEnumValue<MediaProtocol>(); } },
                {"ReadAtNativeFramerate", n => { ReadAtNativeFramerate = n.GetBoolValue(); } },
                {"RequiredHttpHeaders", n => { RequiredHttpHeaders = n.GetObjectValue<MediaSourceInfo_RequiredHttpHeaders>(MediaSourceInfo_RequiredHttpHeaders.CreateFromDiscriminatorValue); } },
                {"RequiresClosing", n => { RequiresClosing = n.GetBoolValue(); } },
                {"RequiresLooping", n => { RequiresLooping = n.GetBoolValue(); } },
                {"RequiresOpening", n => { RequiresOpening = n.GetBoolValue(); } },
                {"RunTimeTicks", n => { RunTimeTicks = n.GetLongValue(); } },
                {"Size", n => { Size = n.GetLongValue(); } },
                {"SupportsDirectPlay", n => { SupportsDirectPlay = n.GetBoolValue(); } },
                {"SupportsDirectStream", n => { SupportsDirectStream = n.GetBoolValue(); } },
                {"SupportsProbing", n => { SupportsProbing = n.GetBoolValue(); } },
                {"SupportsTranscoding", n => { SupportsTranscoding = n.GetBoolValue(); } },
                {"Timestamp", n => { Timestamp = n.GetEnumValue<TransportStreamTimestamp>(); } },
                {"TranscodingContainer", n => { TranscodingContainer = n.GetStringValue(); } },
                {"TranscodingSubProtocol", n => { TranscodingSubProtocol = n.GetStringValue(); } },
                {"TranscodingUrl", n => { TranscodingUrl = n.GetStringValue(); } },
                {"Type", n => { Type = n.GetEnumValue<MediaSourceType>(); } },
                {"Video3DFormat", n => { Video3DFormat = n.GetEnumValue<Video3DFormat>(); } },
                {"VideoType", n => { VideoType = n.GetEnumValue<VideoType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("AnalyzeDurationMs", AnalyzeDurationMs);
            writer.WriteIntValue("Bitrate", Bitrate);
            writer.WriteIntValue("BufferMs", BufferMs);
            writer.WriteStringValue("Container", Container);
            writer.WriteIntValue("DefaultAudioStreamIndex", DefaultAudioStreamIndex);
            writer.WriteIntValue("DefaultSubtitleStreamIndex", DefaultSubtitleStreamIndex);
            writer.WriteStringValue("EncoderPath", EncoderPath);
            writer.WriteEnumValue<MediaProtocol>("EncoderProtocol", EncoderProtocol);
            writer.WriteStringValue("ETag", ETag);
            writer.WriteCollectionOfPrimitiveValues<string>("Formats", Formats);
            writer.WriteBoolValue("GenPtsInput", GenPtsInput);
            writer.WriteStringValue("Id", Id);
            writer.WriteBoolValue("IgnoreDts", IgnoreDts);
            writer.WriteBoolValue("IgnoreIndex", IgnoreIndex);
            writer.WriteBoolValue("IsInfiniteStream", IsInfiniteStream);
            writer.WriteEnumValue<IsoType>("IsoType", IsoType);
            writer.WriteBoolValue("IsRemote", IsRemote);
            writer.WriteStringValue("LiveStreamId", LiveStreamId);
            writer.WriteCollectionOfObjectValues<MediaAttachment>("MediaAttachments", MediaAttachments);
            writer.WriteCollectionOfObjectValues<MediaStream>("MediaStreams", MediaStreams);
            writer.WriteStringValue("Name", Name);
            writer.WriteStringValue("OpenToken", OpenToken);
            writer.WriteStringValue("Path", Path);
            writer.WriteEnumValue<MediaProtocol>("Protocol", Protocol);
            writer.WriteBoolValue("ReadAtNativeFramerate", ReadAtNativeFramerate);
            writer.WriteObjectValue<MediaSourceInfo_RequiredHttpHeaders>("RequiredHttpHeaders", RequiredHttpHeaders);
            writer.WriteBoolValue("RequiresClosing", RequiresClosing);
            writer.WriteBoolValue("RequiresLooping", RequiresLooping);
            writer.WriteBoolValue("RequiresOpening", RequiresOpening);
            writer.WriteLongValue("RunTimeTicks", RunTimeTicks);
            writer.WriteLongValue("Size", Size);
            writer.WriteBoolValue("SupportsDirectPlay", SupportsDirectPlay);
            writer.WriteBoolValue("SupportsDirectStream", SupportsDirectStream);
            writer.WriteBoolValue("SupportsProbing", SupportsProbing);
            writer.WriteBoolValue("SupportsTranscoding", SupportsTranscoding);
            writer.WriteEnumValue<TransportStreamTimestamp>("Timestamp", Timestamp);
            writer.WriteStringValue("TranscodingContainer", TranscodingContainer);
            writer.WriteStringValue("TranscodingSubProtocol", TranscodingSubProtocol);
            writer.WriteStringValue("TranscodingUrl", TranscodingUrl);
            writer.WriteEnumValue<MediaSourceType>("Type", Type);
            writer.WriteEnumValue<Video3DFormat>("Video3DFormat", Video3DFormat);
            writer.WriteEnumValue<VideoType>("VideoType", VideoType);
        }
    }
}
