// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class PlayRequestDto.
    /// </summary>
    public class PlayRequestDto : IParsable {
        /// <summary>Gets or sets the position of the playing item in the queue.</summary>
        public int? PlayingItemPosition { get; set; }
        /// <summary>Gets or sets the playing queue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? PlayingQueue { get; set; }
#nullable restore
#else
        public List<Guid?> PlayingQueue { get; set; }
#endif
        /// <summary>Gets or sets the start position ticks.</summary>
        public long? StartPositionTicks { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PlayRequestDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PlayRequestDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"PlayingItemPosition", n => { PlayingItemPosition = n.GetIntValue(); } },
                {"PlayingQueue", n => { PlayingQueue = n.GetCollectionOfPrimitiveValues<Guid?>()?.ToList(); } },
                {"StartPositionTicks", n => { StartPositionTicks = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("PlayingItemPosition", PlayingItemPosition);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("PlayingQueue", PlayingQueue);
            writer.WriteLongValue("StartPositionTicks", StartPositionTicks);
        }
    }
}
