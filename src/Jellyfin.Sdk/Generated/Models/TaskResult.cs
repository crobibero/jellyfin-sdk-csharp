// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Class TaskExecutionInfo.
    /// </summary>
    public class TaskResult : IParsable 
    {
        /// <summary>Gets or sets the end time UTC.</summary>
        public DateTimeOffset? EndTimeUtc { get; set; }
        /// <summary>Gets or sets the error message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ErrorMessage { get; set; }
#nullable restore
#else
        public string ErrorMessage { get; set; }
#endif
        /// <summary>Gets or sets the id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Gets or sets the key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Gets or sets the long error message.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LongErrorMessage { get; set; }
#nullable restore
#else
        public string LongErrorMessage { get; set; }
#endif
        /// <summary>Gets or sets the name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Gets or sets the start time UTC.</summary>
        public DateTimeOffset? StartTimeUtc { get; set; }
        /// <summary>Gets or sets the status.</summary>
        public TaskResult_Status? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TaskResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TaskResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TaskResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"EndTimeUtc", n => { EndTimeUtc = n.GetDateTimeOffsetValue(); } },
                {"ErrorMessage", n => { ErrorMessage = n.GetStringValue(); } },
                {"Id", n => { Id = n.GetStringValue(); } },
                {"Key", n => { Key = n.GetStringValue(); } },
                {"LongErrorMessage", n => { LongErrorMessage = n.GetStringValue(); } },
                {"Name", n => { Name = n.GetStringValue(); } },
                {"StartTimeUtc", n => { StartTimeUtc = n.GetDateTimeOffsetValue(); } },
                {"Status", n => { Status = n.GetEnumValue<TaskResult_Status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("EndTimeUtc", EndTimeUtc);
            writer.WriteStringValue("ErrorMessage", ErrorMessage);
            writer.WriteStringValue("Id", Id);
            writer.WriteStringValue("Key", Key);
            writer.WriteStringValue("LongErrorMessage", LongErrorMessage);
            writer.WriteStringValue("Name", Name);
            writer.WriteDateTimeOffsetValue("StartTimeUtc", StartTimeUtc);
            writer.WriteEnumValue<TaskResult_Status>("Status", Status);
        }
    }
}
