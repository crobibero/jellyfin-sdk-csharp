// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// LyricResponse model.
    /// </summary>
    public class LyricDto : IParsable 
    {
        /// <summary>Gets or sets a collection of individual lyric lines.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<LyricLine>? Lyrics { get; set; }
#nullable restore
#else
        public List<LyricLine> Lyrics { get; set; }
#endif
        /// <summary>Gets or sets Metadata for the lyrics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LyricMetadata? Metadata { get; set; }
#nullable restore
#else
        public LyricMetadata Metadata { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LyricDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LyricDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LyricDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"Lyrics", n => { Lyrics = n.GetCollectionOfObjectValues<LyricLine>(LyricLine.CreateFromDiscriminatorValue)?.ToList(); } },
                {"Metadata", n => { Metadata = n.GetObjectValue<LyricMetadata>(LyricMetadata.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<LyricLine>("Lyrics", Lyrics);
            writer.WriteObjectValue<LyricMetadata>("Metadata", Metadata);
        }
    }
}
