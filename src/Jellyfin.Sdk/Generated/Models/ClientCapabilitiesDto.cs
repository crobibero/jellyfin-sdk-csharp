// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Jellyfin.Sdk.Generated.Models {
    /// <summary>
    /// Client capabilities dto.
    /// </summary>
    public class ClientCapabilitiesDto : IParsable {
        /// <summary>Gets or sets the app store url.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppStoreUrl { get; set; }
#nullable restore
#else
        public string AppStoreUrl { get; set; }
#endif
        /// <summary>A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.&lt;br /&gt;Specifically, it defines the supported &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles&quot;&gt;containers&lt;/see&gt; and&lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)the device is able to direct play (without transcoding or remuxing),as well as which &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&apos;t.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Jellyfin.Sdk.Generated.Models.DeviceProfile? DeviceProfile { get; set; }
#nullable restore
#else
        public Jellyfin.Sdk.Generated.Models.DeviceProfile DeviceProfile { get; set; }
#endif
        /// <summary>Gets or sets the icon url.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IconUrl { get; set; }
#nullable restore
#else
        public string IconUrl { get; set; }
#endif
        /// <summary>Gets or sets the message callback url.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageCallbackUrl { get; set; }
#nullable restore
#else
        public string MessageCallbackUrl { get; set; }
#endif
        /// <summary>Gets or sets the list of playable media types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PlayableMediaTypes { get; set; }
#nullable restore
#else
        public List<string> PlayableMediaTypes { get; set; }
#endif
        /// <summary>Gets or sets the list of supported commands.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GeneralCommandType?>? SupportedCommands { get; set; }
#nullable restore
#else
        public List<GeneralCommandType?> SupportedCommands { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether session supports content uploading.</summary>
        public bool? SupportsContentUploading { get; set; }
        /// <summary>Gets or sets a value indicating whether session supports media control.</summary>
        public bool? SupportsMediaControl { get; set; }
        /// <summary>Gets or sets a value indicating whether session supports a persistent identifier.</summary>
        public bool? SupportsPersistentIdentifier { get; set; }
        /// <summary>Gets or sets a value indicating whether session supports sync.</summary>
        public bool? SupportsSync { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ClientCapabilitiesDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ClientCapabilitiesDto CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ClientCapabilitiesDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"AppStoreUrl", n => { AppStoreUrl = n.GetStringValue(); } },
                {"DeviceProfile", n => { DeviceProfile = n.GetObjectValue<Jellyfin.Sdk.Generated.Models.DeviceProfile>(Jellyfin.Sdk.Generated.Models.DeviceProfile.CreateFromDiscriminatorValue); } },
                {"IconUrl", n => { IconUrl = n.GetStringValue(); } },
                {"MessageCallbackUrl", n => { MessageCallbackUrl = n.GetStringValue(); } },
                {"PlayableMediaTypes", n => { PlayableMediaTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"SupportedCommands", n => { SupportedCommands = n.GetCollectionOfEnumValues<GeneralCommandType>()?.ToList(); } },
                {"SupportsContentUploading", n => { SupportsContentUploading = n.GetBoolValue(); } },
                {"SupportsMediaControl", n => { SupportsMediaControl = n.GetBoolValue(); } },
                {"SupportsPersistentIdentifier", n => { SupportsPersistentIdentifier = n.GetBoolValue(); } },
                {"SupportsSync", n => { SupportsSync = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AppStoreUrl", AppStoreUrl);
            writer.WriteObjectValue<Jellyfin.Sdk.Generated.Models.DeviceProfile>("DeviceProfile", DeviceProfile);
            writer.WriteStringValue("IconUrl", IconUrl);
            writer.WriteStringValue("MessageCallbackUrl", MessageCallbackUrl);
            writer.WriteCollectionOfPrimitiveValues<string>("PlayableMediaTypes", PlayableMediaTypes);
            writer.WriteCollectionOfEnumValues<GeneralCommandType>("SupportedCommands", SupportedCommands);
            writer.WriteBoolValue("SupportsContentUploading", SupportsContentUploading);
            writer.WriteBoolValue("SupportsMediaControl", SupportsMediaControl);
            writer.WriteBoolValue("SupportsPersistentIdentifier", SupportsPersistentIdentifier);
            writer.WriteBoolValue("SupportsSync", SupportsSync);
        }
    }
}
