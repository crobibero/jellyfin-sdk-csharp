// <auto-generated/>
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.LiveStreams.Open {
    /// <summary>
    /// Builds and executes requests for operations under \LiveStreams\Open
    /// </summary>
    public class OpenRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new OpenRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OpenRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/LiveStreams/Open{?audioStreamIndex*,enableDirectPlay*,enableDirectStream*,itemId*,maxAudioChannels*,maxStreamingBitrate*,openToken*,playSessionId*,startTimeTicks*,subtitleStreamIndex*,userId*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new OpenRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OpenRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/LiveStreams/Open{?audioStreamIndex*,enableDirectPlay*,enableDirectStream*,itemId*,maxAudioChannels*,maxStreamingBitrate*,openToken*,playSessionId*,startTimeTicks*,subtitleStreamIndex*,userId*}", rawUrl) {
        }
        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <param name="body">Open live stream dto.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<LiveStreamResponse?> PostAsync(OpenLiveStreamDto body, Action<RequestConfiguration<OpenRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<LiveStreamResponse> PostAsync(OpenLiveStreamDto body, Action<RequestConfiguration<OpenRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<LiveStreamResponse>(requestInfo, LiveStreamResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Opens a media source.
        /// </summary>
        /// <param name="body">Open live stream dto.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(OpenLiveStreamDto body, Action<RequestConfiguration<OpenRequestBuilderPostQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(OpenLiveStreamDto body, Action<RequestConfiguration<OpenRequestBuilderPostQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public OpenRequestBuilder WithUrl(string rawUrl) {
            return new OpenRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Opens a media source.
        /// </summary>
        public class OpenRequestBuilderPostQueryParameters {
            /// <summary>The audio stream index.</summary>
            [QueryParameter("audioStreamIndex")]
            public int? AudioStreamIndex { get; set; }
            /// <summary>Whether to enable direct play. Default: true.</summary>
            [QueryParameter("enableDirectPlay")]
            public bool? EnableDirectPlay { get; set; }
            /// <summary>Whether to enable direct stream. Default: true.</summary>
            [QueryParameter("enableDirectStream")]
            public bool? EnableDirectStream { get; set; }
            /// <summary>The item id.</summary>
            [QueryParameter("itemId")]
            public Guid? ItemId { get; set; }
            /// <summary>The maximum number of audio channels.</summary>
            [QueryParameter("maxAudioChannels")]
            public int? MaxAudioChannels { get; set; }
            /// <summary>The maximum streaming bitrate.</summary>
            [QueryParameter("maxStreamingBitrate")]
            public int? MaxStreamingBitrate { get; set; }
            /// <summary>The open token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("openToken")]
            public string? OpenToken { get; set; }
#nullable restore
#else
            [QueryParameter("openToken")]
            public string OpenToken { get; set; }
#endif
            /// <summary>The play session id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("playSessionId")]
            public string? PlaySessionId { get; set; }
#nullable restore
#else
            [QueryParameter("playSessionId")]
            public string PlaySessionId { get; set; }
#endif
            /// <summary>The start time in ticks.</summary>
            [QueryParameter("startTimeTicks")]
            public long? StartTimeTicks { get; set; }
            /// <summary>The subtitle stream index.</summary>
            [QueryParameter("subtitleStreamIndex")]
            public int? SubtitleStreamIndex { get; set; }
            /// <summary>The user id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class OpenRequestBuilderPostRequestConfiguration : RequestConfiguration<OpenRequestBuilderPostQueryParameters> {
        }
    }
}
