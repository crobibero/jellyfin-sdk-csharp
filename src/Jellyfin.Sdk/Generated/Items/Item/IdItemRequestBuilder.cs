// <auto-generated/>
using Jellyfin.Sdk.Generated.Items.Item.Ancestors;
using Jellyfin.Sdk.Generated.Items.Item.ContentType;
using Jellyfin.Sdk.Generated.Items.Item.CriticReviews;
using Jellyfin.Sdk.Generated.Items.Item.Download;
using Jellyfin.Sdk.Generated.Items.Item.ExternalIdInfos;
using Jellyfin.Sdk.Generated.Items.Item.FileNamespace;
using Jellyfin.Sdk.Generated.Items.Item.Images;
using Jellyfin.Sdk.Generated.Items.Item.InstantMix;
using Jellyfin.Sdk.Generated.Items.Item.MetadataEditor;
using Jellyfin.Sdk.Generated.Items.Item.PlaybackInfo;
using Jellyfin.Sdk.Generated.Items.Item.Refresh;
using Jellyfin.Sdk.Generated.Items.Item.RemoteImages;
using Jellyfin.Sdk.Generated.Items.Item.RemoteSearch;
using Jellyfin.Sdk.Generated.Items.Item.Similar;
using Jellyfin.Sdk.Generated.Items.Item.ThemeMedia;
using Jellyfin.Sdk.Generated.Items.Item.ThemeSongs;
using Jellyfin.Sdk.Generated.Items.Item.ThemeVideos;
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Items.Item {
    /// <summary>
    /// Builds and executes requests for operations under \Items\{id-id}
    /// </summary>
    public class IdItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The Ancestors property</summary>
        public AncestorsRequestBuilder Ancestors { get =>
            new AncestorsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ContentType property</summary>
        public ContentTypeRequestBuilder ContentType { get =>
            new ContentTypeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The CriticReviews property</summary>
        public CriticReviewsRequestBuilder CriticReviews { get =>
            new CriticReviewsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Download property</summary>
        public DownloadRequestBuilder Download { get =>
            new DownloadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ExternalIdInfos property</summary>
        public ExternalIdInfosRequestBuilder ExternalIdInfos { get =>
            new ExternalIdInfosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The File property</summary>
        public FileRequestBuilder File { get =>
            new FileRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Images property</summary>
        public ImagesRequestBuilder Images { get =>
            new ImagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The InstantMix property</summary>
        public InstantMixRequestBuilder InstantMix { get =>
            new InstantMixRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The MetadataEditor property</summary>
        public MetadataEditorRequestBuilder MetadataEditor { get =>
            new MetadataEditorRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The PlaybackInfo property</summary>
        public PlaybackInfoRequestBuilder PlaybackInfo { get =>
            new PlaybackInfoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Refresh property</summary>
        public RefreshRequestBuilder Refresh { get =>
            new RefreshRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The RemoteImages property</summary>
        public RemoteImagesRequestBuilder RemoteImages { get =>
            new RemoteImagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The RemoteSearch property</summary>
        public RemoteSearchRequestBuilder RemoteSearch { get =>
            new RemoteSearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Similar property</summary>
        public SimilarRequestBuilder Similar { get =>
            new SimilarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ThemeMedia property</summary>
        public ThemeMediaRequestBuilder ThemeMedia { get =>
            new ThemeMediaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ThemeSongs property</summary>
        public ThemeSongsRequestBuilder ThemeSongs { get =>
            new ThemeSongsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ThemeVideos property</summary>
        public ThemeVideosRequestBuilder ThemeVideos { get =>
            new ThemeVideosRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="IdItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IdItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/{id%2Did}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new <see cref="IdItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IdItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/{id%2Did}", rawUrl) {
        }
        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ProblemDetails">When receiving a 401 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"401", ProblemDetails.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates an item.
        /// </summary>
        /// <param name="body">This is strictly used as a data transfer object from the api layer.This holds information about a BaseItem in a format that is convenient for the client.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ProblemDetails">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(BaseItemDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task PostAsync(BaseItemDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"404", ProblemDetails.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an item from the library and filesystem.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// Updates an item.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">This is strictly used as a data transfer object from the api layer.This holds information about a BaseItem in a format that is convenient for the client.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(BaseItemDto body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(BaseItemDto body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="IdItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public IdItemRequestBuilder WithUrl(string rawUrl) {
            return new IdItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
