// <auto-generated/>
using Jellyfin.Sdk.Generated.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Jellyfin.Sdk.Generated.Items.Item.PlaybackInfo {
    /// <summary>
    /// Builds and executes requests for operations under \Items\{itemId}\PlaybackInfo
    /// </summary>
    public class PlaybackInfoRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="PlaybackInfoRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlaybackInfoRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/{itemId}/PlaybackInfo{?allowAudioStreamCopy*,allowVideoStreamCopy*,audioStreamIndex*,autoOpenLiveStream*,enableDirectPlay*,enableDirectStream*,enableTranscoding*,liveStreamId*,maxAudioChannels*,maxStreamingBitrate*,mediaSourceId*,startTimeTicks*,subtitleStreamIndex*,userId*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="PlaybackInfoRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlaybackInfoRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/Items/{itemId}/PlaybackInfo{?allowAudioStreamCopy*,allowVideoStreamCopy*,audioStreamIndex*,autoOpenLiveStream*,enableDirectPlay*,enableDirectStream*,enableTranscoding*,liveStreamId*,maxAudioChannels*,maxStreamingBitrate*,mediaSourceId*,startTimeTicks*,subtitleStreamIndex*,userId*}", rawUrl)
        {
        }
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <returns>A <see cref="PlaybackInfoResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ProblemDetails">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PlaybackInfoResponse?> GetAsync(Action<RequestConfiguration<PlaybackInfoRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<PlaybackInfoResponse> GetAsync(Action<RequestConfiguration<PlaybackInfoRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"404", ProblemDetails.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<PlaybackInfoResponse>(requestInfo, PlaybackInfoResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.Query parameters are obsolete.
        /// </summary>
        /// <returns>A <see cref="PlaybackInfoResponse"/></returns>
        /// <param name="body">Plabyback info dto.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ProblemDetails">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PlaybackInfoResponse?> PostAsync(PlaybackInfoDto body, Action<RequestConfiguration<PlaybackInfoRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<PlaybackInfoResponse> PostAsync(PlaybackInfoDto body, Action<RequestConfiguration<PlaybackInfoRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"404", ProblemDetails.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<PlaybackInfoResponse>(requestInfo, PlaybackInfoResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<PlaybackInfoRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<PlaybackInfoRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            return requestInfo;
        }
        /// <summary>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.Query parameters are obsolete.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Plabyback info dto.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(PlaybackInfoDto body, Action<RequestConfiguration<PlaybackInfoRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(PlaybackInfoDto body, Action<RequestConfiguration<PlaybackInfoRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json, application/json;profile=\"CamelCase\", application/json;profile=\"PascalCase\"");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="PlaybackInfoRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public PlaybackInfoRequestBuilder WithUrl(string rawUrl)
        {
            return new PlaybackInfoRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Gets live playback media info for an item.
        /// </summary>
        public class PlaybackInfoRequestBuilderGetQueryParameters 
        {
            /// <summary>The user id.</summary>
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
        /// <summary>
        /// For backwards compatibility parameters can be sent via Query or Body, with Query having higher precedence.Query parameters are obsolete.
        /// </summary>
        public class PlaybackInfoRequestBuilderPostQueryParameters 
        {
            /// <summary>Whether to allow to copy the audio stream. Default: true.</summary>
            [Obsolete("")]
            [QueryParameter("allowAudioStreamCopy")]
            public bool? AllowAudioStreamCopy { get; set; }
            /// <summary>Whether to allow to copy the video stream. Default: true.</summary>
            [Obsolete("")]
            [QueryParameter("allowVideoStreamCopy")]
            public bool? AllowVideoStreamCopy { get; set; }
            /// <summary>The audio stream index.</summary>
            [Obsolete("")]
            [QueryParameter("audioStreamIndex")]
            public int? AudioStreamIndex { get; set; }
            /// <summary>Whether to auto open the livestream.</summary>
            [Obsolete("")]
            [QueryParameter("autoOpenLiveStream")]
            public bool? AutoOpenLiveStream { get; set; }
            /// <summary>Whether to enable direct play. Default: true.</summary>
            [Obsolete("")]
            [QueryParameter("enableDirectPlay")]
            public bool? EnableDirectPlay { get; set; }
            /// <summary>Whether to enable direct stream. Default: true.</summary>
            [Obsolete("")]
            [QueryParameter("enableDirectStream")]
            public bool? EnableDirectStream { get; set; }
            /// <summary>Whether to enable transcoding. Default: true.</summary>
            [Obsolete("")]
            [QueryParameter("enableTranscoding")]
            public bool? EnableTranscoding { get; set; }
            /// <summary>The livestream id.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("liveStreamId")]
            public string? LiveStreamId { get; set; }
#nullable restore
#else
            [QueryParameter("liveStreamId")]
            public string LiveStreamId { get; set; }
#endif
            /// <summary>The maximum number of audio channels.</summary>
            [Obsolete("")]
            [QueryParameter("maxAudioChannels")]
            public int? MaxAudioChannels { get; set; }
            /// <summary>The maximum streaming bitrate.</summary>
            [Obsolete("")]
            [QueryParameter("maxStreamingBitrate")]
            public int? MaxStreamingBitrate { get; set; }
            /// <summary>The media source id.</summary>
            [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("mediaSourceId")]
            public string? MediaSourceId { get; set; }
#nullable restore
#else
            [QueryParameter("mediaSourceId")]
            public string MediaSourceId { get; set; }
#endif
            /// <summary>The start time in ticks.</summary>
            [Obsolete("")]
            [QueryParameter("startTimeTicks")]
            public long? StartTimeTicks { get; set; }
            /// <summary>The subtitle stream index.</summary>
            [Obsolete("")]
            [QueryParameter("subtitleStreamIndex")]
            public int? SubtitleStreamIndex { get; set; }
            /// <summary>The user id.</summary>
            [Obsolete("")]
            [QueryParameter("userId")]
            public Guid? UserId { get; set; }
        }
    }
}
